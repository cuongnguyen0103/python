import streamlit as st
import numpy as np
import pandas as pd

st.title("Data Science")
user = st.text_input('Yêu cầu đăng nhập:')
if user=='xinchao':
    st.write("-"*60)

    menu = ['Thư viện','python_co_ban','python_nang_cao','sql','Data_Precessing_AND_Analysis','Machine_Learning','Big_data','model','tong_hop']
    choice = st.sidebar.selectbox('Menu',menu)

    if choice == 'Thư viện':
        st.write('## Hệ điều hành Window')
        st.write('### 1. python')
        st.write('#### python hỗ trợ')
        st.write('''\n
                    Lệnh: import warnings\n
                    warnings.filterwarnings('ignore')''')
        st.write('#### time/datetime/calendar')
        st.write('Lệnh: import time')
        st.write('Lệnh: import datetime')
        st.write('Lệnh: import calendar')
        st.write('#### os')
        st.write('Lệnh: import os')
        st.write('#### numpy')
        st.write('Cài đặt: pip install numpy')
        st.write('Lệnh: import numpy as np')
        st.write('#### Pandas')
        st.write('Cài đặt: pip install pandas')
        st.write('Lệnh: import pandas as pd')
        st.write('Lệnh: from sklearn.datasets import fetch_openml')
        st.write('### 2. Biểu đồ')
        st.write('#### matplotlib')
        st.write('Cài đặt: pip install matplotlib')
        st.write('Lệnh: import matplotlib.pyplot as plt')
        st.write('#### seaborn')
        st.write('Cài đặt: pip install seaborn')
        st.write('Lệnh: import seaborn as sns')
        st.write('#### wordcloud')
        st.write('Cài đặt: pip install wordcloud')
        st.write('Lệnh: import pandas as pd')
        st.write('#### pillow')
        st.write('Cài đặt: pip install pillow')
        st.write('Lệnh: import pandas as pd')
        st.write('#### plotly')
        st.write('Cài đặt: pip install plotly')
        st.write('Lệnh: import pandas as pd')
        st.write('### Xử lý ngôn ngữ')
        st.write('#### NLP')
        st.write('Cài đặt: pip install pandas')
        st.write('Lệnh: from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer')
        st.write('### Mô hình')
        st.write('#### Train/test')
        st.write('Lệnh: from sklearn.model_selection import train_test_split')
        st.write('#### Linear regression')
        st.write('#### Logistic regression')
        st.write('#### Naive Bayes')
        st.write('Lệnh: from sklearn.naive_bayes import MultinomialNB, BernoulliNB, GaussianNB')
        st.write('#### KNN')
        st.write('Lệnh: from sklearn.neighbors import KNeighborsClassifier,KNeighborsRegressor')
        st.write('#### Đánh giá mô hình')
        st.write('Cài đặt: pip install pandas')
        st.write('Lệnh: from sklearn.metrics import accuracy_score, mean_squared_error,mean_absolute_error,confusion_matrix')
        st.write('Lệnh: from sklearn.metrics import classification_report,roc_auc_score,roc_curve')
        
        st.write('#### Pandas')
        st.write('Cài đặt: pip install pandas')
        st.write('Lệnh: import pandas as pd')

    elif choice == 'python_co_ban':
        menu_python_co_ban=['Tổng_quan_về_lập_trình','Biến_và_các_kiểu_dữ_liệu','Toán_tử','Cấu_trúc_câu_điều_kiện',
                            'Cấu_trúc_lặp', 'Hàm_built_in_functions','Hàm_user_definded_functions',
                            'Kiểu_dữ_liệu_danh_sách', 'Tập_tin_và_thư_muc','Model_và_package','Xử_lý_ngoại_lệ','Bài_tập']
        selected = st.selectbox("Mời bạn lựa chọn ?",menu_python_co_ban)
        st.write("Bạn chọn:", selected)
        if selected=='Tổng_quan_về_lập_trình':
            st.write('## Nội dung gồm:')
            st.write('1. Các khái niệm về lập trình')
            st.write('2. Giới thiệu về python')
            st.write('3. Môi trường phát triển ứng dụng')
            st.write('4. Xây dựng ứng dụng đầu tiên')
            st.write("## 1. Các khái niệm về lập trình")
            st.image('1_file_python_co_ban/1_tong_quan_ve_lap_trinh/1_khai_niem/h1_1.png')
            st.image('1_file_python_co_ban/1_tong_quan_ve_lap_trinh/1_khai_niem/h1_2.png')
            st.image('1_file_python_co_ban/1_tong_quan_ve_lap_trinh/1_khai_niem/h1_3.png')
            st.image('1_file_python_co_ban/1_tong_quan_ve_lap_trinh/1_khai_niem/h1_4.png')
            st.write("## 2. Giới thiệu về python")
            st.image('1_file_python_co_ban/1_tong_quan_ve_lap_trinh/2_gioi_thieu_python/h2_1.png')
            st.image('1_file_python_co_ban/1_tong_quan_ve_lap_trinh/2_gioi_thieu_python/h2_2.png')
            st.image('1_file_python_co_ban/1_tong_quan_ve_lap_trinh/2_gioi_thieu_python/h2_3.png')
            st.write("## 3. Môi trường phát triển ứng dụng")
            st.image('1_file_python_co_ban/1_tong_quan_ve_lap_trinh/3_moi_truong_phat_trien_ung_dung/h3_1.png')
            st.image('1_file_python_co_ban/1_tong_quan_ve_lap_trinh/3_moi_truong_phat_trien_ung_dung/h3_2.png')
            st.image('1_file_python_co_ban/1_tong_quan_ve_lap_trinh/3_moi_truong_phat_trien_ung_dung/h3_3.png')
            st.image('1_file_python_co_ban/1_tong_quan_ve_lap_trinh/3_moi_truong_phat_trien_ung_dung/h3_4.png')
            st.image('1_file_python_co_ban/1_tong_quan_ve_lap_trinh/3_moi_truong_phat_trien_ung_dung/h3_5.png')
            st.write("## 4. Xây dựng ứng dụng đầu tiên")
            st.image('1_file_python_co_ban/1_tong_quan_ve_lap_trinh/4_xay_dụng_ung_dung_dau_tien/h4_1.png')
            st.image('1_file_python_co_ban/1_tong_quan_ve_lap_trinh/4_xay_dụng_ung_dung_dau_tien/h4_2.png')
            st.image('1_file_python_co_ban/1_tong_quan_ve_lap_trinh/4_xay_dụng_ung_dung_dau_tien/h4_3.png')
            st.image('1_file_python_co_ban/1_tong_quan_ve_lap_trinh/4_xay_dụng_ung_dung_dau_tien/h4_4.png')
        elif selected=='Biến_và_các_kiểu_dữ_liệu':
            st.write('## Nội dung gồm:')
            st.write('1. Giới thiệu về biến')
            st.write('2. Định danh')
            st.write('3. Các kiểu dữ liệu cơ bản')
            st.write('4. Chuyển đổi kiểu dữ liệu')
            st.write('5. Chú thích trong python')
            st.write('6. Các thao tác nhập/xuất(input/output)')
            st.write('## 1. Giới thiệu về biến')
            st.image('1_file_python_co_ban/2_bien_va_cac_kieu_du_lieu/1_gioi_thieu_ve_bien/h1_1.png')
            st.image('1_file_python_co_ban/2_bien_va_cac_kieu_du_lieu/1_gioi_thieu_ve_bien/h1_2.png')
            st.image('1_file_python_co_ban/2_bien_va_cac_kieu_du_lieu/1_gioi_thieu_ve_bien/h1_3.png')
            st.write('## 2. Định danh')
            st.image('1_file_python_co_ban/2_bien_va_cac_kieu_du_lieu/2_dinh_danh/h2_1.png')
            st.image('1_file_python_co_ban/2_bien_va_cac_kieu_du_lieu/2_dinh_danh/h2_2.png')
            st.image('1_file_python_co_ban/2_bien_va_cac_kieu_du_lieu/2_dinh_danh/h2_3.png')
            st.image('1_file_python_co_ban/2_bien_va_cac_kieu_du_lieu/2_dinh_danh/h2_4.png')
            st.image('1_file_python_co_ban/2_bien_va_cac_kieu_du_lieu/2_dinh_danh/h2_5.png')
            st.write('## 3. Các kiểu dữ liệu cơ bản')
            st.image('1_file_python_co_ban/2_bien_va_cac_kieu_du_lieu/3_cac_kieu_du_lieu_co_ban/h3_1.png')
            st.image('1_file_python_co_ban/2_bien_va_cac_kieu_du_lieu/3_cac_kieu_du_lieu_co_ban/h3_2.png')
            st.image('1_file_python_co_ban/2_bien_va_cac_kieu_du_lieu/3_cac_kieu_du_lieu_co_ban/h3_3.png')
            st.image('1_file_python_co_ban/2_bien_va_cac_kieu_du_lieu/3_cac_kieu_du_lieu_co_ban/h3_4.png')
            st.image('1_file_python_co_ban/2_bien_va_cac_kieu_du_lieu/3_cac_kieu_du_lieu_co_ban/h3_5.png')
            st.image('1_file_python_co_ban/2_bien_va_cac_kieu_du_lieu/3_cac_kieu_du_lieu_co_ban/h3_6.png')
            st.image('1_file_python_co_ban/2_bien_va_cac_kieu_du_lieu/3_cac_kieu_du_lieu_co_ban/h3_7.png')
            st.image('1_file_python_co_ban/2_bien_va_cac_kieu_du_lieu/3_cac_kieu_du_lieu_co_ban/h3_8.png')
            st.image('1_file_python_co_ban/2_bien_va_cac_kieu_du_lieu/3_cac_kieu_du_lieu_co_ban/h3_9.png')
            st.write('## 4. Chuyển đổi kiểu dữ liệu')
            st.image('1_file_python_co_ban/2_bien_va_cac_kieu_du_lieu/4_chuyen_doi_kieu_du_lieu/h4_1.png')
            st.image('1_file_python_co_ban/2_bien_va_cac_kieu_du_lieu/4_chuyen_doi_kieu_du_lieu/h4_2.png')
            st.write('## 5. Chú thích trong python')
            st.image('1_file_python_co_ban/2_bien_va_cac_kieu_du_lieu/5_chu_thich_trong_python/h5_1.png')
            st.image('1_file_python_co_ban/2_bien_va_cac_kieu_du_lieu/5_chu_thich_trong_python/h5_2.png')
            st.write('## 6. Các thao tác nhập/xuất(input/output)')
            st.image('1_file_python_co_ban/2_bien_va_cac_kieu_du_lieu/6_cac_thao_tac_nhap_xuat/h6_1.png')
            st.image('1_file_python_co_ban/2_bien_va_cac_kieu_du_lieu/6_cac_thao_tac_nhap_xuat/h6_2.png')
            st.image('1_file_python_co_ban/2_bien_va_cac_kieu_du_lieu/6_cac_thao_tac_nhap_xuat/h6_3.png')
            st.image('1_file_python_co_ban/2_bien_va_cac_kieu_du_lieu/6_cac_thao_tac_nhap_xuat/h6_4.png')
            st.image('1_file_python_co_ban/2_bien_va_cac_kieu_du_lieu/6_cac_thao_tac_nhap_xuat/h6_5.png')
            st.image('1_file_python_co_ban/2_bien_va_cac_kieu_du_lieu/6_cac_thao_tac_nhap_xuat/h6_6.png')
            st.image('1_file_python_co_ban/2_bien_va_cac_kieu_du_lieu/6_cac_thao_tac_nhap_xuat/h6_7.png')
            st.image('1_file_python_co_ban/2_bien_va_cac_kieu_du_lieu/6_cac_thao_tac_nhap_xuat/h6_8.png')
            st.image('1_file_python_co_ban/2_bien_va_cac_kieu_du_lieu/6_cac_thao_tac_nhap_xuat/h6_9.png')
            st.image('1_file_python_co_ban/2_bien_va_cac_kieu_du_lieu/6_cac_thao_tac_nhap_xuat/h6_10.png')
            st.image('1_file_python_co_ban/2_bien_va_cac_kieu_du_lieu/6_cac_thao_tac_nhap_xuat/h6_11.png')
        elif selected=='Toán_tử':
            st.write('## Nội dung gồm:')
            st.write('1. Toán tử số học (Arithmetic Operators)')
            st.write('2. Toán tử gán (Assignment Operators)')
            st.write('3. Toán tử so sánh (Comparison Operators)')
            st.write('4. Toán tử Logic (Logical Operators)')
            st.write('5. Toán tử thành phần (Membership Operators)')
            st.write('6. Toán tử định danh (Indentity Operators)')
            st.write('7. Toán tử Bitwise (Bitwise Operators)')
            st.write('8. Độ ưu tiên toán tử (Operators Precedence)')
            st.write('## 1. Toán tử số học (Arithmetic Operators)')
            st.image('1_file_python_co_ban/3_toan_tu/1_toan_tu_so_hoc/h1_1.png')
            st.write('## 2. Toán tử gán (Assignment Operators)')
            st.image('1_file_python_co_ban/3_toan_tu/2_toan_tu_gan/h2_1.png')
            st.image('1_file_python_co_ban/3_toan_tu/2_toan_tu_gan/h2_2.png')
            st.write('## 3. Toán tử so sánh (Comparison Operators)')
            st.image('1_file_python_co_ban/3_toan_tu/3_toan_tu_so_sanh/h3_1.png')
            st.image('1_file_python_co_ban/3_toan_tu/3_toan_tu_so_sanh/h3_2.png')
            st.write('## 4. Toán tử Logic (Logical Operators)')
            st.image('1_file_python_co_ban/3_toan_tu/4_toan_tu_logic/h4_1.png')
            st.image('1_file_python_co_ban/3_toan_tu/4_toan_tu_logic/h4_2.png')
            st.image('1_file_python_co_ban/3_toan_tu/4_toan_tu_logic/h4_3.png')
            st.write('## 5. Toán tử thành phần (Membership Operators)')
            st.image('1_file_python_co_ban/3_toan_tu/5_toan_tu_thanh_phan/h5_1.png')
            st.write('## 6. Toán tử định danh (Indentity Operators)')
            st.image('1_file_python_co_ban/3_toan_tu/6_toan_tu_dinh_danh/h6_1.png')
            st.write('## 7. Toán tử Bitwise (Bitwise Operators)')
            st.image('1_file_python_co_ban/3_toan_tu/7_toan_tu_bitwise/h7_1.png')
            st.image('1_file_python_co_ban/3_toan_tu/7_toan_tu_bitwise/h7_2.png')
            st.write('## 8. Độ ưu tiên toán tử (Operators Precedence)')
            st.image('1_file_python_co_ban/3_toan_tu/8_do_uu_tien_toan_tu/h8_1.png')
        elif selected=='Cấu_trúc_câu_điều_kiện':
            st.write('## Nội dung gồm:')
            st.write('1. Giới thiệu')
            st.write('2. Các cấu trúc điều kiện')
            st.write('3. Một số lưu ý')
            st.write('## 1. Giới thiệu')
            st.image('1_file_python_co_ban/4_cau_truc_cau_dieu_kien/1_gioi_thieu/h1_1.png')
            st.write('## 2. Các cấu trúc điều kiện')
            st.image('1_file_python_co_ban/4_cau_truc_cau_dieu_kien/2_cac_cau_truc_dieu_kien/h2_1.png')
            st.image('1_file_python_co_ban/4_cau_truc_cau_dieu_kien/2_cac_cau_truc_dieu_kien/h2_2.png')
            st.image('1_file_python_co_ban/4_cau_truc_cau_dieu_kien/2_cac_cau_truc_dieu_kien/h2_3.png')
            st.image('1_file_python_co_ban/4_cau_truc_cau_dieu_kien/2_cac_cau_truc_dieu_kien/h2_4.png')
            st.image('1_file_python_co_ban/4_cau_truc_cau_dieu_kien/2_cac_cau_truc_dieu_kien/h2_5.png')
            st.image('1_file_python_co_ban/4_cau_truc_cau_dieu_kien/2_cac_cau_truc_dieu_kien/h2_6.png')
            st.image('1_file_python_co_ban/4_cau_truc_cau_dieu_kien/2_cac_cau_truc_dieu_kien/h2_7.png')
            st.write('## 3. Một số lưu ý')
            st.image('1_file_python_co_ban/4_cau_truc_cau_dieu_kien/3_mot_so_luu_y/h3_1.png')
            st.image('1_file_python_co_ban/4_cau_truc_cau_dieu_kien/3_mot_so_luu_y/h3_2.png')
            st.image('1_file_python_co_ban/4_cau_truc_cau_dieu_kien/3_mot_so_luu_y/h3_3.png')
        elif selected=='Cấu_trúc_lặp':
            st.write('## Nội dung gồm:')
            st.write('1. Giới thiệu')
            st.write('2. Cấu trúc lặp')
            st.write('3. Sử dụng else trong vòng lặp')
            st.write('4. Cấu lệnh break và continue')
            st.write('## 1. Giới thiệu')
            st.image('1_file_python_co_ban/5_cau_truc_lap/1_gioi_thieu/h1_1.png')
            st.write('## 2. Cấu trúc lặp')
            st.image('1_file_python_co_ban/5_cau_truc_lap/2_cau_truc_lap/h2_1.png')
            st.image('1_file_python_co_ban/5_cau_truc_lap/2_cau_truc_lap/h2_2.png')
            st.image('1_file_python_co_ban/5_cau_truc_lap/2_cau_truc_lap/h2_3.png')
            st.image('1_file_python_co_ban/5_cau_truc_lap/2_cau_truc_lap/h2_4.png')
            st.image('1_file_python_co_ban/5_cau_truc_lap/2_cau_truc_lap/h2_5.png')
            st.write('## 3. Sử dụng else trong vòng lặp')
            st.image('1_file_python_co_ban/5_cau_truc_lap/3_su_dung_else_trong_vong_lap/h3_1.png')
            st.image('1_file_python_co_ban/5_cau_truc_lap/3_su_dung_else_trong_vong_lap/h3_2.png')
            st.image('1_file_python_co_ban/5_cau_truc_lap/3_su_dung_else_trong_vong_lap/h3_3.png')
            st.write('## 4. Cấu lệnh break và continue')
            st.image('1_file_python_co_ban/5_cau_truc_lap/4_cau_lenh_break_va_continue/h4_1.png')
            st.image('1_file_python_co_ban/5_cau_truc_lap/4_cau_lenh_break_va_continue/h4_2.png')
            st.image('1_file_python_co_ban/5_cau_truc_lap/4_cau_lenh_break_va_continue/h4_3.png')
            st.image('1_file_python_co_ban/5_cau_truc_lap/4_cau_lenh_break_va_continue/h4_4.png')
        elif selected=='Hàm_built_in_functions':
            st.write('## Nội dung gồm:')
            st.write('1. Hàm xử lý số học')
            st.write('2. Hàm xử lý chuỗi')
            st.write('3. Hàm xử lý thời gian')
            st.write('## 1. Hàm xử lý số học')
            st.image('1_file_python_co_ban/6_ham_built_in_functions/1_ham_xu_ly_so_hoc/h1_1.png')
            st.image('1_file_python_co_ban/6_ham_built_in_functions/1_ham_xu_ly_so_hoc/h1_2.png')
            st.image('1_file_python_co_ban/6_ham_built_in_functions/1_ham_xu_ly_so_hoc/h1_3.png')
            st.image('1_file_python_co_ban/6_ham_built_in_functions/1_ham_xu_ly_so_hoc/h1_4.png')
            st.write('## 2. Hàm xử lý chuỗi')
            st.image('1_file_python_co_ban/6_ham_built_in_functions/2_ham_xu_ly_chuoi/h2_1.png')
            st.image('1_file_python_co_ban/6_ham_built_in_functions/2_ham_xu_ly_chuoi/h2_2.png')
            st.image('1_file_python_co_ban/6_ham_built_in_functions/2_ham_xu_ly_chuoi/h2_3.png')
            st.image('1_file_python_co_ban/6_ham_built_in_functions/2_ham_xu_ly_chuoi/h2_4.png')
            st.image('1_file_python_co_ban/6_ham_built_in_functions/2_ham_xu_ly_chuoi/h2_5.png')
            st.image('1_file_python_co_ban/6_ham_built_in_functions/2_ham_xu_ly_chuoi/h2_6.png')
            st.write('## 3. Hàm xử lý thời gian')
            st.image('1_file_python_co_ban/6_ham_built_in_functions/3_ham_xu_ly_thoi_gian/h3_1.png')
            st.image('1_file_python_co_ban/6_ham_built_in_functions/3_ham_xu_ly_thoi_gian/h3_2.png')
            st.image('1_file_python_co_ban/6_ham_built_in_functions/3_ham_xu_ly_thoi_gian/h3_3.png')
            st.image('1_file_python_co_ban/6_ham_built_in_functions/3_ham_xu_ly_thoi_gian/h3_4.png')
            st.image('1_file_python_co_ban/6_ham_built_in_functions/3_ham_xu_ly_thoi_gian/h3_5.png')
            st.image('1_file_python_co_ban/6_ham_built_in_functions/3_ham_xu_ly_thoi_gian/h3_6.png')
            st.image('1_file_python_co_ban/6_ham_built_in_functions/3_ham_xu_ly_thoi_gian/h3_7.png')
            st.image('1_file_python_co_ban/6_ham_built_in_functions/3_ham_xu_ly_thoi_gian/h3_8.png')
            st.image('1_file_python_co_ban/6_ham_built_in_functions/3_ham_xu_ly_thoi_gian/h3_9.png')
            st.image('1_file_python_co_ban/6_ham_built_in_functions/3_ham_xu_ly_thoi_gian/h3_10.png')
            st.image('1_file_python_co_ban/6_ham_built_in_functions/3_ham_xu_ly_thoi_gian/h3_11.png')
            st.image('1_file_python_co_ban/6_ham_built_in_functions/3_ham_xu_ly_thoi_gian/h3_12.png')
            st.image('1_file_python_co_ban/6_ham_built_in_functions/3_ham_xu_ly_thoi_gian/h3_13.png')
            st.image('1_file_python_co_ban/6_ham_built_in_functions/3_ham_xu_ly_thoi_gian/h3_14.png')
            st.image('1_file_python_co_ban/6_ham_built_in_functions/3_ham_xu_ly_thoi_gian/h3_15.png')
            st.image('1_file_python_co_ban/6_ham_built_in_functions/3_ham_xu_ly_thoi_gian/h3_16.png')
            st.image('1_file_python_co_ban/6_ham_built_in_functions/3_ham_xu_ly_thoi_gian/h3_17.png')
            st.image('1_file_python_co_ban/6_ham_built_in_functions/3_ham_xu_ly_thoi_gian/h3_18.png')
            st.image('1_file_python_co_ban/6_ham_built_in_functions/3_ham_xu_ly_thoi_gian/h3_19.png')
            st.image('1_file_python_co_ban/6_ham_built_in_functions/3_ham_xu_ly_thoi_gian/h3_20.png')
            st.image('1_file_python_co_ban/6_ham_built_in_functions/3_ham_xu_ly_thoi_gian/h3_21.png')
            st.image('1_file_python_co_ban/6_ham_built_in_functions/3_ham_xu_ly_thoi_gian/h3_22.png')
            st.image('1_file_python_co_ban/6_ham_built_in_functions/3_ham_xu_ly_thoi_gian/h3_23.png')
        elif selected=='Hàm_user_definded_functions':
            st.write('## Nội dung gồm:')
            st.write('1. Định nghĩa')
            st.write('2. Xây dựng hàm')
            st.write('3. Gọi hàm')
            st.write('4. Phạm vi của biến')
            st.write('5. Tham số')
            st.write('6. Hàm Lambda')
            st.write('## 1. Định nghĩa')
            st.image('1_file_python_co_ban/7_ham_user_definded_functions/1_dinh_nghia/h1_1.png')
            st.write('## 2. Xây dựng hàm')
            st.image('1_file_python_co_ban/7_ham_user_definded_functions/2_xay_dung_ham/h2_1.png')
            st.image('1_file_python_co_ban/7_ham_user_definded_functions/2_xay_dung_ham/h2_2.png')
            st.write('## 3. Gọi hàm')
            st.image('1_file_python_co_ban/7_ham_user_definded_functions/3_goi_ham/h3_1.png')
            st.image('1_file_python_co_ban/7_ham_user_definded_functions/3_goi_ham/h3_2.png')
            st.write('## 4. Phạm vi của biến')
            st.image('1_file_python_co_ban/7_ham_user_definded_functions/4_pham_vi_cua_bien/h4_1.png')
            st.image('1_file_python_co_ban/7_ham_user_definded_functions/4_pham_vi_cua_bien/h4_2.png')
            st.image('1_file_python_co_ban/7_ham_user_definded_functions/4_pham_vi_cua_bien/h4_3.png')
            st.write('## 5. Tham số')
            st.image('1_file_python_co_ban/7_ham_user_definded_functions/5_tham_so/h5_1.png')
            st.image('1_file_python_co_ban/7_ham_user_definded_functions/5_tham_so/h5_2.png')
            st.image('1_file_python_co_ban/7_ham_user_definded_functions/5_tham_so/h5_3.png')
            st.image('1_file_python_co_ban/7_ham_user_definded_functions/5_tham_so/h5_4.png')
            st.image('1_file_python_co_ban/7_ham_user_definded_functions/5_tham_so/h5_5.png')
            st.image('1_file_python_co_ban/7_ham_user_definded_functions/5_tham_so/h5_6.png')
            st.image('1_file_python_co_ban/7_ham_user_definded_functions/5_tham_so/h5_7.png')
            st.image('1_file_python_co_ban/7_ham_user_definded_functions/5_tham_so/h5_8.png')
            st.image('1_file_python_co_ban/7_ham_user_definded_functions/5_tham_so/h5_9.png')
            st.image('1_file_python_co_ban/7_ham_user_definded_functions/5_tham_so/h5_10.png')
            st.image('1_file_python_co_ban/7_ham_user_definded_functions/5_tham_so/h5_11.png')
            st.image('1_file_python_co_ban/7_ham_user_definded_functions/5_tham_so/h5_12.png')
            st.write('## 6. Hàm Lambda')
            st.image('1_file_python_co_ban/7_ham_user_definded_functions/6_ham_lambda/h6_1.png')
            st.image('1_file_python_co_ban/7_ham_user_definded_functions/6_ham_lambda/h6_2.png')
            st.image('1_file_python_co_ban/7_ham_user_definded_functions/6_ham_lambda/h6_3.png')
            st.image('1_file_python_co_ban/7_ham_user_definded_functions/6_ham_lambda/h6_4.png')
            st.image('1_file_python_co_ban/7_ham_user_definded_functions/6_ham_lambda/h6_5.png')
        elif selected=='Kiểu_dữ_liệu_danh_sách':
            st.write('## Nội dung gồm:')
            st.write('1. Giới thiệu về Sequence')
            st.write('2. List')
            st.write('3. Tulpe')
            st.write('4. Dictionary')
            st.write('5. Set')
            st.write('6. Các built-in functions xử lý Sequence')
            st.write('## 1. Giới thiệu về Sequence')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/1_gioi_thieu_ve_squence/h1_1.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/1_gioi_thieu_ve_squence/h1_2.png')
            st.write('## 2. List')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/2_list/h2_1.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/2_list/h2_2.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/2_list/h2_3.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/2_list/h2_4.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/2_list/h2_5.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/2_list/h2_6.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/2_list/h2_7.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/2_list/h2_8.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/2_list/h2_8.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/2_list/h2_10.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/2_list/h2_11.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/2_list/h2_12.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/2_list/h2_13.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/2_list/h2_14.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/2_list/h2_15.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/2_list/h2_16.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/2_list/h2_17.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/2_list/h2_18.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/2_list/h2_19.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/2_list/h2_20.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/2_list/h2_21.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/2_list/h2_22.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/2_list/h2_23.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/2_list/h2_24.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/2_list/h2_25.png')
            st.write('## 3. Tulpe')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/3_tuple/h3_1.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/3_tuple/h3_2.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/3_tuple/h3_3.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/3_tuple/h3_4.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/3_tuple/h3_5.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/3_tuple/h3_6.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/3_tuple/h3_7.png')
            st.write('## 4. Dictionary')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/4_dictionary/h4_1.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/4_dictionary/h4_2.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/4_dictionary/h4_3.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/4_dictionary/h4_4.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/4_dictionary/h4_5.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/4_dictionary/h4_6.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/4_dictionary/h4_7.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/4_dictionary/h4_8.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/4_dictionary/h4_9.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/4_dictionary/h4_10.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/4_dictionary/h4_11.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/4_dictionary/h4_12.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/4_dictionary/h4_13.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/4_dictionary/h4_14.png')
            st.write('## 5. Set')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/5_set/h5_1.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/5_set/h5_2.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/5_set/h5_3.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/5_set/h5_4.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/5_set/h5_5.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/5_set/h5_6.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/5_set/h5_7.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/5_set/h5_8.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/5_set/h5_9.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/5_set/h5_10.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/5_set/h5_11.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/5_set/h5_12.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/5_set/h5_13.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/5_set/h5_14.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/5_set/h5_15.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/5_set/h5_16.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/5_set/h5_17.png')
            st.write('## 6. Các built-in functions xử lý Sequence')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/6_cac_built_in_functions_xu_ly_sequence/h6_1.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/6_cac_built_in_functions_xu_ly_sequence/h6_2.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/6_cac_built_in_functions_xu_ly_sequence/h6_3.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/6_cac_built_in_functions_xu_ly_sequence/h6_4.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/6_cac_built_in_functions_xu_ly_sequence/h6_5.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/6_cac_built_in_functions_xu_ly_sequence/h6_6.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/6_cac_built_in_functions_xu_ly_sequence/h6_7.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/6_cac_built_in_functions_xu_ly_sequence/h6_8.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/6_cac_built_in_functions_xu_ly_sequence/h6_9.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/6_cac_built_in_functions_xu_ly_sequence/h6_10.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/6_cac_built_in_functions_xu_ly_sequence/h6_11.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/6_cac_built_in_functions_xu_ly_sequence/h6_12.png')
            st.image('1_file_python_co_ban/8_kieu_du_lieu_danh_sach/6_cac_built_in_functions_xu_ly_sequence/h6_13.png')
        elif selected=='Tập_tin_và_thư_muc':
            st.write('## Nội dung gồm:')
            st.write('1. Làm việc với tập tin văn bản')
            st.write('2. Làm việc với tập tin csv')
            st.write('3. Thư viện OS')
            st.write('## 1. Làm việc với tập tin văn bản')
            st.image('1_file_python_co_ban/9_tap_tin_va_thu_muc/1_lam_viec_voi_tap_tin_van_ban/h1_1.png')
            st.image('1_file_python_co_ban/9_tap_tin_va_thu_muc/1_lam_viec_voi_tap_tin_van_ban/h1_2.png')
            st.image('1_file_python_co_ban/9_tap_tin_va_thu_muc/1_lam_viec_voi_tap_tin_van_ban/h1_3.png')
            st.image('1_file_python_co_ban/9_tap_tin_va_thu_muc/1_lam_viec_voi_tap_tin_van_ban/h1_4.png')
            st.image('1_file_python_co_ban/9_tap_tin_va_thu_muc/1_lam_viec_voi_tap_tin_van_ban/h1_5.png')
            st.image('1_file_python_co_ban/9_tap_tin_va_thu_muc/1_lam_viec_voi_tap_tin_van_ban/h1_6.png')
            st.image('1_file_python_co_ban/9_tap_tin_va_thu_muc/1_lam_viec_voi_tap_tin_van_ban/h1_7.png')
            st.image('1_file_python_co_ban/9_tap_tin_va_thu_muc/1_lam_viec_voi_tap_tin_van_ban/h1_8.png')
            st.image('1_file_python_co_ban/9_tap_tin_va_thu_muc/1_lam_viec_voi_tap_tin_van_ban/h1_9.png')
            st.image('1_file_python_co_ban/9_tap_tin_va_thu_muc/1_lam_viec_voi_tap_tin_van_ban/h1_10.png')
            st.image('1_file_python_co_ban/9_tap_tin_va_thu_muc/1_lam_viec_voi_tap_tin_van_ban/h1_11.png')
            st.image('1_file_python_co_ban/9_tap_tin_va_thu_muc/1_lam_viec_voi_tap_tin_van_ban/h1_12.png')
            st.image('1_file_python_co_ban/9_tap_tin_va_thu_muc/1_lam_viec_voi_tap_tin_van_ban/h1_13.png')
            st.image('1_file_python_co_ban/9_tap_tin_va_thu_muc/1_lam_viec_voi_tap_tin_van_ban/h1_14.png')
            st.image('1_file_python_co_ban/9_tap_tin_va_thu_muc/1_lam_viec_voi_tap_tin_van_ban/h1_15.png')
            st.image('1_file_python_co_ban/9_tap_tin_va_thu_muc/1_lam_viec_voi_tap_tin_van_ban/h1_16.png')
            st.image('1_file_python_co_ban/9_tap_tin_va_thu_muc/1_lam_viec_voi_tap_tin_van_ban/h1_17.png')
            st.write('## 2. Làm việc với tập tin csv')
            st.image('1_file_python_co_ban/9_tap_tin_va_thu_muc/2_lam_viec_voi_tap_tin_csv/h2_1.png')
            st.image('1_file_python_co_ban/9_tap_tin_va_thu_muc/2_lam_viec_voi_tap_tin_csv/h2_2.png')
            st.image('1_file_python_co_ban/9_tap_tin_va_thu_muc/2_lam_viec_voi_tap_tin_csv/h2_3.png')
            st.image('1_file_python_co_ban/9_tap_tin_va_thu_muc/2_lam_viec_voi_tap_tin_csv/h2_4.png')
            st.image('1_file_python_co_ban/9_tap_tin_va_thu_muc/2_lam_viec_voi_tap_tin_csv/h2_5.png')
            st.image('1_file_python_co_ban/9_tap_tin_va_thu_muc/2_lam_viec_voi_tap_tin_csv/h2_6.png')
            st.image('1_file_python_co_ban/9_tap_tin_va_thu_muc/2_lam_viec_voi_tap_tin_csv/h2_7.png')
            st.image('1_file_python_co_ban/9_tap_tin_va_thu_muc/2_lam_viec_voi_tap_tin_csv/h2_8.png')
            st.image('1_file_python_co_ban/9_tap_tin_va_thu_muc/2_lam_viec_voi_tap_tin_csv/h2_9.png')
            st.image('1_file_python_co_ban/9_tap_tin_va_thu_muc/2_lam_viec_voi_tap_tin_csv/h2_10.png')
            st.write('## 3. Thư viện OS')
            st.image('1_file_python_co_ban/9_tap_tin_va_thu_muc/3_thu_vien_os/h3_1.png')
            st.image('1_file_python_co_ban/9_tap_tin_va_thu_muc/3_thu_vien_os/h3_2.png')
            st.image('1_file_python_co_ban/9_tap_tin_va_thu_muc/3_thu_vien_os/h3_3.png')
            st.image('1_file_python_co_ban/9_tap_tin_va_thu_muc/3_thu_vien_os/h3_4.png')
            st.image('1_file_python_co_ban/9_tap_tin_va_thu_muc/3_thu_vien_os/h3_5.png')
        elif selected=='Model_và_package':
            st.write('## Nội dung gồm:')
            st.write('1. Module')
            st.write('2. Package')
            st.write('3. Một số Module có sẵn trong python')
            st.write('4. Cài đặt và quản lý package vơi PIP')
            st.write('## 1. Module')
            st.image('1_file_python_co_ban/10_model_va_package/1_module/h1_1.png')
            st.image('1_file_python_co_ban/10_model_va_package/1_module/h1_2.png')
            st.image('1_file_python_co_ban/10_model_va_package/1_module/h1_3.png')
            st.image('1_file_python_co_ban/10_model_va_package/1_module/h1_4.png')
            st.image('1_file_python_co_ban/10_model_va_package/1_module/h1_5.png')
            st.image('1_file_python_co_ban/10_model_va_package/1_module/h1_6.png')
            st.image('1_file_python_co_ban/10_model_va_package/1_module/h1_7.png')
            st.image('1_file_python_co_ban/10_model_va_package/1_module/h1_8.png')
            st.image('1_file_python_co_ban/10_model_va_package/1_module/h1_9.png')
            st.image('1_file_python_co_ban/10_model_va_package/1_module/h1_10.png')
            st.image('1_file_python_co_ban/10_model_va_package/1_module/h1_11.png')
            st.image('1_file_python_co_ban/10_model_va_package/1_module/h1_12.png')
            st.image('1_file_python_co_ban/10_model_va_package/1_module/h1_13.png')
            st.image('1_file_python_co_ban/10_model_va_package/1_module/h1_14.png')
            st.image('1_file_python_co_ban/10_model_va_package/1_module/h1_15.png')
            st.image('1_file_python_co_ban/10_model_va_package/1_module/h1_16.png')
            st.image('1_file_python_co_ban/10_model_va_package/1_module/h1_17.png')
            st.write('## 2. Package')
            st.image('1_file_python_co_ban/10_model_va_package/2_package/h2_1.png')
            st.image('1_file_python_co_ban/10_model_va_package/2_package/h2_2.png')
            st.image('1_file_python_co_ban/10_model_va_package/2_package/h2_3.png')
            st.write('## 3. Một số Module có sẵn trong python')
            st.image('1_file_python_co_ban/10_model_va_package/3_mot_so_module_co_san_trong_python/h3_1.png')
            st.write('## 4. Cài đặt và quản lý package vơi PIP')
            st.image('1_file_python_co_ban/10_model_va_package/4_cai_dat_va_quan_ly_package_voi_PIP/h4_1.png')
            st.image('1_file_python_co_ban/10_model_va_package/4_cai_dat_va_quan_ly_package_voi_PIP/h4_2.png')
            st.image('1_file_python_co_ban/10_model_va_package/4_cai_dat_va_quan_ly_package_voi_PIP/h4_3.png')
        elif selected=='Xử_lý_ngoại_lệ':
            st.write('## Nội dung gồm:')
            st.write('1. Giới thiệu')
            st.write('2. Xử lý ngoại lệ')
            st.write('## 1. Giới thiệu')
            st.image('1_file_python_co_ban/11_xu_ly_ngoai_le/1_gioi_thieu/h1_1.png')
            st.write('## 2. Xử lý ngoại lệ')
            st.image('1_file_python_co_ban/11_xu_ly_ngoai_le/2_xu_ly_ngoai_le/h2_1.png')
            st.image('1_file_python_co_ban/11_xu_ly_ngoai_le/2_xu_ly_ngoai_le/h2_2.png')
            st.image('1_file_python_co_ban/11_xu_ly_ngoai_le/2_xu_ly_ngoai_le/h2_3.png')
            st.image('1_file_python_co_ban/11_xu_ly_ngoai_le/2_xu_ly_ngoai_le/h2_4.png')
            st.image('1_file_python_co_ban/11_xu_ly_ngoai_le/2_xu_ly_ngoai_le/h2_5.png')
            st.image('1_file_python_co_ban/11_xu_ly_ngoai_le/2_xu_ly_ngoai_le/h2_6.png')
            st.image('1_file_python_co_ban/11_xu_ly_ngoai_le/2_xu_ly_ngoai_le/h2_7.png')
            st.image('1_file_python_co_ban/11_xu_ly_ngoai_le/2_xu_ly_ngoai_le/h2_8.png')
            st.image('1_file_python_co_ban/11_xu_ly_ngoai_le/2_xu_ly_ngoai_le/h2_9.png')
            st.image('1_file_python_co_ban/11_xu_ly_ngoai_le/2_xu_ly_ngoai_le/h2_10.png')
        elif selected=='Bài_tập':
            menu_bai_tap=['Tổng_quan_về_lập_trình','Biến_và_các_kiểu_dữ_liệu','Toán_tử','Cấu_trúc_câu_điều_kiện',
                            'Cấu_trúc_lặp', 'Hàm','Kiểu_dữ_liệu_danh_sách', 'Tập_tin_và_thư_muc','Model_và_package','Xử_lý_ngoại_lệ']
            selected_bt = st.selectbox("Mời bạn lựa chọn ?",menu_bai_tap)
            st.write("Bạn chọn:", selected_bt)
            if selected_bt=='Tổng_quan_về_lập_trình':
                st.image('1_file_python_co_ban/12_bai_tap/1_tong_quan_ve_lap_trinh/h1.png')
            elif selected_bt=='Biến_và_các_kiểu_dữ_liệu':
                st.image('1_file_python_co_ban/12_bai_tap/2_bien_va_cac_kieu_du_lieu/h2_1.png')
                st.image('1_file_python_co_ban/12_bai_tap/2_bien_va_cac_kieu_du_lieu/h2_2.png')
                st.image('1_file_python_co_ban/12_bai_tap/2_bien_va_cac_kieu_du_lieu/h2_3.png')
                st.image('1_file_python_co_ban/12_bai_tap/2_bien_va_cac_kieu_du_lieu/h2_4.png')
                st.image('1_file_python_co_ban/12_bai_tap/2_bien_va_cac_kieu_du_lieu/h2_5.png')
                st.write('*'*60)
                st.write('## Giải')
                st.write('### Câu 2.1 (Tự làm)')
                st.write('### Câu 2.2')
                st.image('1_file_python_co_ban/12_bai_tap/2_bien_va_cac_kieu_du_lieu/c2_2.png')
                st.write('### Câu 2.3')
                st.image('1_file_python_co_ban/12_bai_tap/2_bien_va_cac_kieu_du_lieu/c2_3.png')
                st.write('### Câu 2.4')
                st.image('1_file_python_co_ban/12_bai_tap/2_bien_va_cac_kieu_du_lieu/c2_4.png')
                st.write('### Câu 2.5')
                st.image('1_file_python_co_ban/12_bai_tap/2_bien_va_cac_kieu_du_lieu/c2_5.png')
            elif selected_bt=='Toán_tử':
                st.image('1_file_python_co_ban/12_bai_tap/3_toan_tu/h3_1.png')
                st.image('1_file_python_co_ban/12_bai_tap/3_toan_tu/h3_2.png')
                st.image('1_file_python_co_ban/12_bai_tap/3_toan_tu/h3_3.png')
                st.image('1_file_python_co_ban/12_bai_tap/3_toan_tu/h3_4.png')
                st.write('*'*60)
                st.write('## Giải')
                st.write('### Câu 3.1')
                st.image('1_file_python_co_ban/12_bai_tap/3_toan_tu/c3_1.png')
                st.write('### Câu 3.2')
                st.image('1_file_python_co_ban/12_bai_tap/3_toan_tu/c3_2.png')
                st.write('### Câu 3.3')
                st.image('1_file_python_co_ban/12_bai_tap/3_toan_tu/c3_3.png')
                st.write('### Câu 3.4')
                st.image('1_file_python_co_ban/12_bai_tap/3_toan_tu/c3_4.png')
            elif selected_bt=='Cấu_trúc_câu_điều_kiện':
                st.image('1_file_python_co_ban/12_bai_tap/4_cau_truc_cau_dieu_kien/h4_1.png')
                st.image('1_file_python_co_ban/12_bai_tap/4_cau_truc_cau_dieu_kien/h4_2.png')
                st.image('1_file_python_co_ban/12_bai_tap/4_cau_truc_cau_dieu_kien/h4_3.png')
                st.image('1_file_python_co_ban/12_bai_tap/4_cau_truc_cau_dieu_kien/h4_4.png')
                st.image('1_file_python_co_ban/12_bai_tap/4_cau_truc_cau_dieu_kien/h4_5.png')
                st.image('1_file_python_co_ban/12_bai_tap/4_cau_truc_cau_dieu_kien/h4_6.png')
                st.write('*'*60)
                st.write('## Giải')
                st.write('### Câu 4.1')
                st.image('1_file_python_co_ban/12_bai_tap/4_cau_truc_cau_dieu_kien/c4_1_1.png')
                st.image('1_file_python_co_ban/12_bai_tap/4_cau_truc_cau_dieu_kien/c4_1_2.png')
                st.write('### Câu 4.2')
                st.image('1_file_python_co_ban/12_bai_tap/4_cau_truc_cau_dieu_kien/c4_2.png')
                st.write('### Câu 4.3')
                st.image('1_file_python_co_ban/12_bai_tap/4_cau_truc_cau_dieu_kien/c4_3_1.png')
                st.image('1_file_python_co_ban/12_bai_tap/4_cau_truc_cau_dieu_kien/c4_3_2.png')
            elif selected_bt=='Cấu_trúc_lặp':
                st.image('1_file_python_co_ban/12_bai_tap/5_cau_truc_lap/h5_1.png')
                st.image('1_file_python_co_ban/12_bai_tap/5_cau_truc_lap/h5_2.png')
                st.image('1_file_python_co_ban/12_bai_tap/5_cau_truc_lap/h5_3.png')
                st.image('1_file_python_co_ban/12_bai_tap/5_cau_truc_lap/h5_4.png')
                st.image('1_file_python_co_ban/12_bai_tap/5_cau_truc_lap/h5_5.png')
                st.image('1_file_python_co_ban/12_bai_tap/5_cau_truc_lap/h5_6.png')
                st.image('1_file_python_co_ban/12_bai_tap/5_cau_truc_lap/h5_7.png')
                st.write('## Giải')
                st.write('### Câu 5.1')
                st.image('1_file_python_co_ban/12_bai_tap/5_cau_truc_lap/c5_1.png')
                st.write('### Câu 5.2')
                st.image('1_file_python_co_ban/12_bai_tap/5_cau_truc_lap/c5_2.png')
                st.write('### Câu 5.3')
                st.image('1_file_python_co_ban/12_bai_tap/5_cau_truc_lap/c5_3.png')
                st.write('### Câu 5.4')
                st.image('1_file_python_co_ban/12_bai_tap/5_cau_truc_lap/c5_4.png')
                st.write('### Câu 5.5')
                st.image('1_file_python_co_ban/12_bai_tap/5_cau_truc_lap/c5_5.png')
                st.write('### Câu 5.6')
                st.image('1_file_python_co_ban/12_bai_tap/5_cau_truc_lap/c5_6.png')
                st.write('### Câu 5.7')
                st.image('1_file_python_co_ban/12_bai_tap/5_cau_truc_lap/c5_7.png')
            elif selected_bt=='Hàm':
                st.image('1_file_python_co_ban/12_bai_tap/6_ham/h6_1.png')
                st.image('1_file_python_co_ban/12_bai_tap/6_ham/h6_2.png')
                st.image('1_file_python_co_ban/12_bai_tap/6_ham/h6_3.png')
                st.image('1_file_python_co_ban/12_bai_tap/6_ham/h6_4.png')
                st.image('1_file_python_co_ban/12_bai_tap/6_ham/h6_5.png')
                st.image('1_file_python_co_ban/12_bai_tap/6_ham/h6_6.png')
                st.image('1_file_python_co_ban/12_bai_tap/6_ham/h6_7.png')
                st.image('1_file_python_co_ban/12_bai_tap/6_ham/h6_8.png')
                st.image('1_file_python_co_ban/12_bai_tap/6_ham/h6_9.png')
                st.image('1_file_python_co_ban/12_bai_tap/6_ham/h6_10.png')
                st.image('1_file_python_co_ban/12_bai_tap/6_ham/h6_11.png')
                st.image('1_file_python_co_ban/12_bai_tap/6_ham/h6_12.png')
                st.image('1_file_python_co_ban/12_bai_tap/6_ham/h6_13.png')
                st.image('1_file_python_co_ban/12_bai_tap/6_ham/h6_14.png')
                st.image('1_file_python_co_ban/12_bai_tap/6_ham/h6_15.png')
                st.image('1_file_python_co_ban/12_bai_tap/6_ham/h6_16.png')
                st.write('## Giải')
                st.write('### Câu 6.1')
                st.image('1_file_python_co_ban/12_bai_tap/6_ham/c6_1.png')
                st.write('### Câu 6.2')
                st.image('1_file_python_co_ban/12_bai_tap/6_ham/c6_2.png')
                st.write('### Câu 6.3')
                st.image('1_file_python_co_ban/12_bai_tap/6_ham/c6_3.png')
                st.write('### Câu 6.4')
                st.image('1_file_python_co_ban/12_bai_tap/6_ham/c6_4.png')
                st.write('### Câu 6.5')
                st.image('1_file_python_co_ban/12_bai_tap/6_ham/c6_5.png')
                st.write('### Câu 6.6')
                st.image('1_file_python_co_ban/12_bai_tap/6_ham/c6_6.png')
                st.write('### Câu 6.7')
                st.image('1_file_python_co_ban/12_bai_tap/6_ham/c6_7.png')
                st.write('### Câu 6.8')
                st.image('1_file_python_co_ban/12_bai_tap/6_ham/c6_8.png')
                st.write('### Câu 6.9')
                st.image('1_file_python_co_ban/12_bai_tap/6_ham/c6_9.png')
                st.write('### Câu 6.10')
                st.image('1_file_python_co_ban/12_bai_tap/6_ham/c6_10.png')
            elif selected_bt=='Kiểu_dữ_liệu_danh_sách':
                st.image('1_file_python_co_ban/12_bai_tap/7_kieu_du_lieu_danh_sach/h7_1.png')
                st.image('1_file_python_co_ban/12_bai_tap/7_kieu_du_lieu_danh_sach/h7_2.png')
                st.image('1_file_python_co_ban/12_bai_tap/7_kieu_du_lieu_danh_sach/h7_3.png')
                st.image('1_file_python_co_ban/12_bai_tap/7_kieu_du_lieu_danh_sach/h7_4.png')
                st.image('1_file_python_co_ban/12_bai_tap/7_kieu_du_lieu_danh_sach/h7_5.png')
                st.image('1_file_python_co_ban/12_bai_tap/7_kieu_du_lieu_danh_sach/h7_6.png')
                st.image('1_file_python_co_ban/12_bai_tap/7_kieu_du_lieu_danh_sach/h7_7.png')
                st.image('1_file_python_co_ban/12_bai_tap/7_kieu_du_lieu_danh_sach/h7_8.png')
                st.image('1_file_python_co_ban/12_bai_tap/7_kieu_du_lieu_danh_sach/h7_9.png')
                st.image('1_file_python_co_ban/12_bai_tap/7_kieu_du_lieu_danh_sach/h7_10.png')
                st.image('1_file_python_co_ban/12_bai_tap/7_kieu_du_lieu_danh_sach/h7_11.png')
                st.image('1_file_python_co_ban/12_bai_tap/7_kieu_du_lieu_danh_sach/h7_12.png')
                st.image('1_file_python_co_ban/12_bai_tap/7_kieu_du_lieu_danh_sach/h7_13.png')
                st.image('1_file_python_co_ban/12_bai_tap/7_kieu_du_lieu_danh_sach/h7_14.png')
                st.image('1_file_python_co_ban/12_bai_tap/7_kieu_du_lieu_danh_sach/h7_15.png')
                st.image('1_file_python_co_ban/12_bai_tap/7_kieu_du_lieu_danh_sach/h7_16.png')
                st.image('1_file_python_co_ban/12_bai_tap/7_kieu_du_lieu_danh_sach/h7_17.png')
                st.image('1_file_python_co_ban/12_bai_tap/7_kieu_du_lieu_danh_sach/h7_18.png')
                st.image('1_file_python_co_ban/12_bai_tap/7_kieu_du_lieu_danh_sach/h7_19.png')
                st.image('1_file_python_co_ban/12_bai_tap/7_kieu_du_lieu_danh_sach/h7_20.png')
                st.image('1_file_python_co_ban/12_bai_tap/7_kieu_du_lieu_danh_sach/h7_21.png')
                st.write('## Giải')
                st.write('### Câu 7.1')
                st.image('1_file_python_co_ban/12_bai_tap/7_kieu_du_lieu_danh_sach/c7_1.png')
                st.write('### Câu 7.2')
                st.image('1_file_python_co_ban/12_bai_tap/7_kieu_du_lieu_danh_sach/c7_2.png')
                st.write('### Câu 7.3')
                st.image('1_file_python_co_ban/12_bai_tap/7_kieu_du_lieu_danh_sach/c7_3.png')
                st.write('### Câu 7.4')
                st.image('1_file_python_co_ban/12_bai_tap/7_kieu_du_lieu_danh_sach/c7_4.png')
                st.write('### Câu 7.5')
                st.image('1_file_python_co_ban/12_bai_tap/7_kieu_du_lieu_danh_sach/c7_5.png')
                st.write('### Câu 7.6')
                st.image('1_file_python_co_ban/12_bai_tap/7_kieu_du_lieu_danh_sach/c7_6.png')
                st.write('### Câu 7.7')
                st.image('1_file_python_co_ban/12_bai_tap/7_kieu_du_lieu_danh_sach/c7_7.png')
                st.write('### Câu 7.8')
                st.image('1_file_python_co_ban/12_bai_tap/7_kieu_du_lieu_danh_sach/c7_8.png')
                st.write('### Câu 7.9')
                st.image('1_file_python_co_ban/12_bai_tap/7_kieu_du_lieu_danh_sach/c7_bt.png')
            elif selected_bt=='Tập_tin_và_thư_muc':
                st.image('1_file_python_co_ban/12_bai_tap/8_tap_tin_va_thu_muc/h8_1.png')
                st.image('1_file_python_co_ban/12_bai_tap/8_tap_tin_va_thu_muc/h8_2.png')
                st.image('1_file_python_co_ban/12_bai_tap/8_tap_tin_va_thu_muc/h8_3.png')
                st.image('1_file_python_co_ban/12_bai_tap/8_tap_tin_va_thu_muc/h8_4.png')
                st.image('1_file_python_co_ban/12_bai_tap/8_tap_tin_va_thu_muc/h8_5.png')
                st.image('1_file_python_co_ban/12_bai_tap/8_tap_tin_va_thu_muc/h8_6.png')
                st.image('1_file_python_co_ban/12_bai_tap/8_tap_tin_va_thu_muc/h8_7.png')
                st.image('1_file_python_co_ban/12_bai_tap/8_tap_tin_va_thu_muc/h8_8.png')
                st.image('1_file_python_co_ban/12_bai_tap/8_tap_tin_va_thu_muc/h8_9.png')
                st.write('## Giải')
                st.write('### Câu 8.1')
                st.image('1_file_python_co_ban/12_bai_tap/8_tap_tin_va_thu_muc/c8_1.png')
                st.write('### Câu 8.2')
                st.image('1_file_python_co_ban/12_bai_tap/8_tap_tin_va_thu_muc/c8_2.png')
                st.write('### Câu 8.3')
                st.image('1_file_python_co_ban/12_bai_tap/8_tap_tin_va_thu_muc/c8_3.png')
                st.write('### Câu 8.5')
                st.image('1_file_python_co_ban/12_bai_tap/8_tap_tin_va_thu_muc/c8_5.png')
                st.write('### Câu 8.6')
                st.image('1_file_python_co_ban/12_bai_tap/8_tap_tin_va_thu_muc/c8_6.png')
            elif selected_bt=='Model_và_package':
                st.image('1_file_python_co_ban/12_bai_tap/9_model_va_package/h9_1.png')
                st.image('1_file_python_co_ban/12_bai_tap/9_model_va_package/h9_2.png')
                st.image('1_file_python_co_ban/12_bai_tap/9_model_va_package/h9_3.png')
                st.image('1_file_python_co_ban/12_bai_tap/9_model_va_package/h9_4.png')
                st.image('1_file_python_co_ban/12_bai_tap/9_model_va_package/h9_5.png')
                st.image('1_file_python_co_ban/12_bai_tap/9_model_va_package/h9_6.png')
                st.image('1_file_python_co_ban/12_bai_tap/9_model_va_package/h9_7.png')
            elif selected_bt=='Xử_lý_ngoại_lệ':
                st.image('1_file_python_co_ban/12_bai_tap/10_xu_ly_ngoai_le/h10_1.png')
                st.image('1_file_python_co_ban/12_bai_tap/10_xu_ly_ngoai_le/h10_2.png')
                st.image('1_file_python_co_ban/12_bai_tap/10_xu_ly_ngoai_le/h10_3.png')
                st.image('1_file_python_co_ban/12_bai_tap/10_xu_ly_ngoai_le/h10_4.png')
    elif choice == 'python_nang_cao':
        menu_python_nang_cao=['Tổng_quan_Data_Science','Thư_viện_numpy','Thư_viện_Pandas','Matplotlib_Seaborn','Plotly']
        selected = st.selectbox("Mời bạn lựa chọn ?",menu_python_nang_cao)
        st.write("Bạn chọn:", selected)
        if selected=='Tổng_quan_Data_Science':
            st.write('## Nội dung gồm:')
            st.write('1. Giới thiệu về Data Science')
            st.write('2. Khác biệt giữa Data Science và Data Analytics')
            st.write('3. Quy trình thực hiện dự án Data Science')
            st.write('4. Python và các thư viện mở rộng')
            st.write('5. Thiết lập môi trường làm việc')
            st.write('6. Ngôn ngữ Markdown')
            st.write('## 1. Giới thiệu về Data Science')
            st.image('2_file_python_nang_cao/1_tong_quan_data_science/1_gioi_thieu_ve_data_science/h1_1.png')
            st.image('2_file_python_nang_cao/1_tong_quan_data_science/1_gioi_thieu_ve_data_science/h1_2.png')
            st.image('2_file_python_nang_cao/1_tong_quan_data_science/1_gioi_thieu_ve_data_science/h1_3.png')
            st.image('2_file_python_nang_cao/1_tong_quan_data_science/1_gioi_thieu_ve_data_science/h1_4.png')
            st.image('2_file_python_nang_cao/1_tong_quan_data_science/1_gioi_thieu_ve_data_science/h1_5.png')
            st.write('## 2. Khác biệt giữa Data Science và Data Analytics')
            st.image('2_file_python_nang_cao/1_tong_quan_data_science/2_khac_biet_giua_data_science_va_data_analytics/h2_1.png')
            st.image('2_file_python_nang_cao/1_tong_quan_data_science/2_khac_biet_giua_data_science_va_data_analytics/h2_2.png')
            st.image('2_file_python_nang_cao/1_tong_quan_data_science/2_khac_biet_giua_data_science_va_data_analytics/h2_3.png')
            st.write('## 3. Quy trình thực hiện dự án Data Science')
            st.image('2_file_python_nang_cao/1_tong_quan_data_science/3_quy_trinh_thuc_hien_du_an_data_science/h3_1.png')
            st.image('2_file_python_nang_cao/1_tong_quan_data_science/3_quy_trinh_thuc_hien_du_an_data_science/h3_2.png')
            st.image('2_file_python_nang_cao/1_tong_quan_data_science/3_quy_trinh_thuc_hien_du_an_data_science/h3_3.png')
            st.image('2_file_python_nang_cao/1_tong_quan_data_science/3_quy_trinh_thuc_hien_du_an_data_science/h3_4.png')
            st.image('2_file_python_nang_cao/1_tong_quan_data_science/3_quy_trinh_thuc_hien_du_an_data_science/h3_5.png')
            st.image('2_file_python_nang_cao/1_tong_quan_data_science/3_quy_trinh_thuc_hien_du_an_data_science/h3_6.png')
            st.write('## 4. Python và các thư viện mở rộng')
            st.image('2_file_python_nang_cao/1_tong_quan_data_science/4_python_va_cac_thu_vien_mo_rong/h4_1.png')
            st.image('2_file_python_nang_cao/1_tong_quan_data_science/4_python_va_cac_thu_vien_mo_rong/h4_2.png')
            st.write('## 5. Thiết lập môi trường làm việc')
            st.image('2_file_python_nang_cao/1_tong_quan_data_science/5_thiet_lap_moi_truong_lam_viec/h5_1.png')
            st.image('2_file_python_nang_cao/1_tong_quan_data_science/5_thiet_lap_moi_truong_lam_viec/h5_2.png')
            st.image('2_file_python_nang_cao/1_tong_quan_data_science/5_thiet_lap_moi_truong_lam_viec/h5_3.png')
            st.image('2_file_python_nang_cao/1_tong_quan_data_science/5_thiet_lap_moi_truong_lam_viec/h5_4.png')
            st.image('2_file_python_nang_cao/1_tong_quan_data_science/5_thiet_lap_moi_truong_lam_viec/h5_5.png')
            st.image('2_file_python_nang_cao/1_tong_quan_data_science/5_thiet_lap_moi_truong_lam_viec/h5_6.png')
            st.image('2_file_python_nang_cao/1_tong_quan_data_science/5_thiet_lap_moi_truong_lam_viec/h5_7.png')
            st.write('## 6. Ngôn ngữ Markdown')
            st.image('2_file_python_nang_cao/1_tong_quan_data_science/6_ngon_ngu_markdown/h6_1.png')
            st.image('2_file_python_nang_cao/1_tong_quan_data_science/6_ngon_ngu_markdown/h6_2.png')
            st.image('2_file_python_nang_cao/1_tong_quan_data_science/6_ngon_ngu_markdown/h6_3.png')
            st.image('2_file_python_nang_cao/1_tong_quan_data_science/6_ngon_ngu_markdown/h6_4.png')
            st.image('2_file_python_nang_cao/1_tong_quan_data_science/6_ngon_ngu_markdown/h6_5.png')
            st.image('2_file_python_nang_cao/1_tong_quan_data_science/6_ngon_ngu_markdown/h6_6.png')
            st.image('2_file_python_nang_cao/1_tong_quan_data_science/6_ngon_ngu_markdown/h6_7.png')
            st.image('2_file_python_nang_cao/1_tong_quan_data_science/6_ngon_ngu_markdown/h6_8.png')
            st.image('2_file_python_nang_cao/1_tong_quan_data_science/6_ngon_ngu_markdown/h6_9.png')
            st.image('2_file_python_nang_cao/1_tong_quan_data_science/6_ngon_ngu_markdown/h6_10.png')
            st.image('2_file_python_nang_cao/1_tong_quan_data_science/6_ngon_ngu_markdown/h6_11.png')
            st.image('2_file_python_nang_cao/1_tong_quan_data_science/6_ngon_ngu_markdown/h6_12.png')
        elif selected=='Thư_viện_numpy':
            st.write('## Nội dung gồm:')
            st.write('1. Giới thiệu')
            st.write('2. Mảng một chiều')
            st.write('3. mảng nhiều chiều')
            st.write('## 1. Giới thiệu')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/1_gioi_thieu/h1_1.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/1_gioi_thieu/h1_2.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/1_gioi_thieu/h1_3.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/1_gioi_thieu/h1_4.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/1_gioi_thieu/h1_5.png')
            st.write('## 2. Mảng một chiều')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/2_mang_mot_chieu/h2_1.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/2_mang_mot_chieu/h2_2.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/2_mang_mot_chieu/h2_3.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/2_mang_mot_chieu/h2_4.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/2_mang_mot_chieu/h2_5.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/2_mang_mot_chieu/h2_6.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/2_mang_mot_chieu/h2_7.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/2_mang_mot_chieu/h2_8.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/2_mang_mot_chieu/h2_9.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/2_mang_mot_chieu/h2_10.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/2_mang_mot_chieu/h2_11.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/2_mang_mot_chieu/h2_12.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/2_mang_mot_chieu/h2_13.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/2_mang_mot_chieu/h2_14.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/2_mang_mot_chieu/h2_15.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/2_mang_mot_chieu/h2_16.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/2_mang_mot_chieu/h2_17.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/2_mang_mot_chieu/h2_18.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/2_mang_mot_chieu/h2_19.png')
            st.write('## 3. mảng nhiều chiều')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/3_mang_nhieu_chieu/h3_1.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/3_mang_nhieu_chieu/h3_2.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/3_mang_nhieu_chieu/h3_3.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/3_mang_nhieu_chieu/h3_4.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/3_mang_nhieu_chieu/h3_5.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/3_mang_nhieu_chieu/h3_6.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/3_mang_nhieu_chieu/h3_7.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/3_mang_nhieu_chieu/h3_8.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/3_mang_nhieu_chieu/h3_9.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/3_mang_nhieu_chieu/h3_10.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/3_mang_nhieu_chieu/h3_11.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/3_mang_nhieu_chieu/h3_12.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/3_mang_nhieu_chieu/h3_13.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/3_mang_nhieu_chieu/h3_14.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/3_mang_nhieu_chieu/h3_15.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/3_mang_nhieu_chieu/h3_16.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/3_mang_nhieu_chieu/h3_17.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/3_mang_nhieu_chieu/h3_18.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/3_mang_nhieu_chieu/h3_19.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/3_mang_nhieu_chieu/h3_20.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/3_mang_nhieu_chieu/h3_21.png')
            st.image('2_file_python_nang_cao/2_thu_vien_numpy/3_mang_nhieu_chieu/h3_22.png')
        elif selected=='Thư_viện_Pandas':
            st.write('## Nội dung gồm:')
            st.write('1. Giới thiệu')
            st.write('2. Series')
            st.write('3. Dataframe')
            st.write('4. Làm sạch dữ liệu')
            st.write('5. Cập nhật và xử lý dữ liệu')
            st.write('6. Thống kê gom nhóm')
            st.write('7.Trực quan hóa dữ liệu với pandas')
            st.write('## 1. Giới thiệu')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/1_gioi_thieu/h1_1.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/1_gioi_thieu/h1_2.png')
            st.write('## 2. Series')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/2_series/h2_1.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/2_series/h2_2.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/2_series/h2_3.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/2_series/h2_4.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/2_series/h2_5.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/2_series/h2_6.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/2_series/h2_7.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/2_series/h2_8.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/2_series/h2_9.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/2_series/h2_10.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/2_series/h2_11.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/2_series/h2_12.png')
            st.write('## 3. Dataframe')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/3_dataframe/h3_1.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/3_dataframe/h3_2.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/3_dataframe/h3_3.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/3_dataframe/h3_4.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/3_dataframe/h3_5.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/3_dataframe/h3_6.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/3_dataframe/h3_7.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/3_dataframe/h3_8.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/3_dataframe/h3_9.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/3_dataframe/h3_10.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/3_dataframe/h3_11.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/3_dataframe/h3_12.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/3_dataframe/h3_13.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/3_dataframe/h3_14.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/3_dataframe/h3_15.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/3_dataframe/h3_16.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/3_dataframe/h3_17.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/3_dataframe/h3_18.png')
            st.write('## 4. Làm sạch dữ liệu')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/4_lam_sach_du_lieu/h4_1.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/4_lam_sach_du_lieu/h4_2.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/4_lam_sach_du_lieu/h4_3.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/4_lam_sach_du_lieu/h4_4.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/4_lam_sach_du_lieu/h4_5.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/4_lam_sach_du_lieu/h4_6.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/4_lam_sach_du_lieu/h4_7.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/4_lam_sach_du_lieu/h4_8.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/4_lam_sach_du_lieu/h4_9.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/4_lam_sach_du_lieu/h4_10.png')
            st.write('## 5. Cập nhật và xử lý dữ liệu')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_1.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_2.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_3.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_4.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_5.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_6.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_7.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_8.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_9.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_10.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_11.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_12.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_13.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_14.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_15.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_16.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_17.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_18.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_19.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_20.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_21.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_22.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_23.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_24.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_25.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_26.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_27.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_28.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_29.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_30.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_31.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_32.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_33.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_34.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_35.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_36.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_37.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_38.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_39.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_40.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_41.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_42.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_43.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_44.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/5_cap_nhat_va_xu_ly_du_lieu/h5_45.png')
            st.write('## 6. Thống kê gom nhóm')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/6_thong_ke_gom_nhom/h6_1.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/6_thong_ke_gom_nhom/h6_2.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/6_thong_ke_gom_nhom/h6_3.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/6_thong_ke_gom_nhom/h6_4.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/6_thong_ke_gom_nhom/h6_5.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/6_thong_ke_gom_nhom/h6_6.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/6_thong_ke_gom_nhom/h6_7.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/6_thong_ke_gom_nhom/h6_8.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/6_thong_ke_gom_nhom/h6_9.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/6_thong_ke_gom_nhom/h6_10.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/6_thong_ke_gom_nhom/h6_11.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/6_thong_ke_gom_nhom/h6_12.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/6_thong_ke_gom_nhom/h6_13.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/6_thong_ke_gom_nhom/h6_14.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/6_thong_ke_gom_nhom/h6_15.png')

            st.write('## 7.Trực quan hóa dữ liệu với pandas')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/7_truc_quan_hoa_du_lieu_voi_pandas/h7_1.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/7_truc_quan_hoa_du_lieu_voi_pandas/h7_2.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/7_truc_quan_hoa_du_lieu_voi_pandas/h7_3.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/7_truc_quan_hoa_du_lieu_voi_pandas/h7_4.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/7_truc_quan_hoa_du_lieu_voi_pandas/h7_5.png')
            st.image('2_file_python_nang_cao/3_thu_vien_pandas/7_truc_quan_hoa_du_lieu_voi_pandas/h7_6.png')
        elif selected=='Matplotlib_Seaborn':
            st.write('## Nội dung gồm:')
            st.write('1. Tổng quan')
            st.write('2. Trực quan hóa dữ liệu với Matplotlib')
            st.write('3. Trực quan hóa dữ liệu với Seaborn')
            st.write('4. Phân tích trực quan đa biến với lưới')
            st.write('5. Trực quan hóa dữ liệu văn bản')   
            st.write('## 1. Tổng quan')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/1_tong_quan/h1_1.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/1_tong_quan/h1_2.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/1_tong_quan/h1_3.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/1_tong_quan/h1_4.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/1_tong_quan/h1_5.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/1_tong_quan/h1_6.png')
            st.write('## 2. Trực quan hóa dữ liệu với matplotlib')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/2_truc_quan_hoa_du_lieu_voi_matplotlib/h2_1.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/2_truc_quan_hoa_du_lieu_voi_matplotlib/h2_2.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/2_truc_quan_hoa_du_lieu_voi_matplotlib/h2_3.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/2_truc_quan_hoa_du_lieu_voi_matplotlib/h2_4.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/2_truc_quan_hoa_du_lieu_voi_matplotlib/h2_5.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/2_truc_quan_hoa_du_lieu_voi_matplotlib/h2_6.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/2_truc_quan_hoa_du_lieu_voi_matplotlib/h2_7.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/2_truc_quan_hoa_du_lieu_voi_matplotlib/h2_8.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/2_truc_quan_hoa_du_lieu_voi_matplotlib/h2_9.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/2_truc_quan_hoa_du_lieu_voi_matplotlib/h2_10.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/2_truc_quan_hoa_du_lieu_voi_matplotlib/h2_11.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/2_truc_quan_hoa_du_lieu_voi_matplotlib/h2_12.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/2_truc_quan_hoa_du_lieu_voi_matplotlib/h2_13.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/2_truc_quan_hoa_du_lieu_voi_matplotlib/h2_14.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/2_truc_quan_hoa_du_lieu_voi_matplotlib/h2_15.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/2_truc_quan_hoa_du_lieu_voi_matplotlib/h2_16.png')
            st.write('## 3. Trực quan hóa dữ liệu với Seaborn ')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/3_truc_quan_hoa_du_lieu_voi_seaborn/h3_1.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/3_truc_quan_hoa_du_lieu_voi_seaborn/h3_2.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/3_truc_quan_hoa_du_lieu_voi_seaborn/h3_3.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/3_truc_quan_hoa_du_lieu_voi_seaborn/h3_4.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/3_truc_quan_hoa_du_lieu_voi_seaborn/h3_5.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/3_truc_quan_hoa_du_lieu_voi_seaborn/h3_6.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/3_truc_quan_hoa_du_lieu_voi_seaborn/h3_7.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/3_truc_quan_hoa_du_lieu_voi_seaborn/h3_8.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/3_truc_quan_hoa_du_lieu_voi_seaborn/h3_9.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/3_truc_quan_hoa_du_lieu_voi_seaborn/h3_10.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/3_truc_quan_hoa_du_lieu_voi_seaborn/h3_11.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/3_truc_quan_hoa_du_lieu_voi_seaborn/h3_12.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/3_truc_quan_hoa_du_lieu_voi_seaborn/h3_13.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/3_truc_quan_hoa_du_lieu_voi_seaborn/h3_14.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/3_truc_quan_hoa_du_lieu_voi_seaborn/h3_15.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/3_truc_quan_hoa_du_lieu_voi_seaborn/h3_16.png')
            st.write('## 4. Phân tích trực quan đa biến với lưới')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/4_phan_tich_truc_quan_da_bien_voi_luoi/h4_1.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/4_phan_tich_truc_quan_da_bien_voi_luoi/h4_2.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/4_phan_tich_truc_quan_da_bien_voi_luoi/h4_3.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/4_phan_tich_truc_quan_da_bien_voi_luoi/h4_4.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/4_phan_tich_truc_quan_da_bien_voi_luoi/h4_5.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/4_phan_tich_truc_quan_da_bien_voi_luoi/h4_6.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/4_phan_tich_truc_quan_da_bien_voi_luoi/h4_7.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/4_phan_tich_truc_quan_da_bien_voi_luoi/h4_8.png')
            st.write('## 5. Trực quan hóa dữ liệu văn bản')      
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/5_truc_quan_hoa_du_lieu_van_ban/h5_1.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/5_truc_quan_hoa_du_lieu_van_ban/h5_2.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/5_truc_quan_hoa_du_lieu_van_ban/h5_3.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/5_truc_quan_hoa_du_lieu_van_ban/h5_4.png')
            st.image('2_file_python_nang_cao/4_matplotlib_seaborn/5_truc_quan_hoa_du_lieu_van_ban/h5_5.png')
        elif selected=='Plotly':
            st.write('## Nội dung gồm:')
            st.write('1. Giới thiệu')
            st.write('2. Trực quan hóa dữ liệu tương tác với Plotly')
            st.write('3. Màu sắc trong trực quan hóa')
            st.write('4. Trực quan hóa dữ liệu địa lý với Plotly')
            st.write('5. Tùy chỉnh biểu đồ')   
            st.write('## 1. Giới thiệu')
            st.image('2_file_python_nang_cao/5_plotly/1_gioi_thieu/h1_1.png')
            st.image('2_file_python_nang_cao/5_plotly/1_gioi_thieu/h1_2.png')
            st.image('2_file_python_nang_cao/5_plotly/1_gioi_thieu/h1_3.png')
            st.image('2_file_python_nang_cao/5_plotly/1_gioi_thieu/h1_4.png')
            st.write('## 2. Trực quan hóa dữ liệu tương tác với Plotly')
            st.image('2_file_python_nang_cao/5_plotly/2_truc_quan_hoa_du_lieu_tuong_tac_voi_plotly/h2_1.png')
            st.image('2_file_python_nang_cao/5_plotly/2_truc_quan_hoa_du_lieu_tuong_tac_voi_plotly/h2_2.png')
            st.image('2_file_python_nang_cao/5_plotly/2_truc_quan_hoa_du_lieu_tuong_tac_voi_plotly/h2_3.png')
            st.image('2_file_python_nang_cao/5_plotly/2_truc_quan_hoa_du_lieu_tuong_tac_voi_plotly/h2_4.png')
            st.image('2_file_python_nang_cao/5_plotly/2_truc_quan_hoa_du_lieu_tuong_tac_voi_plotly/h2_5.png')
            st.image('2_file_python_nang_cao/5_plotly/2_truc_quan_hoa_du_lieu_tuong_tac_voi_plotly/h2_6.png')
            st.image('2_file_python_nang_cao/5_plotly/2_truc_quan_hoa_du_lieu_tuong_tac_voi_plotly/h2_7.png')
            st.write('## 3. Màu sắc trong trực quan hóa')
            st.image('2_file_python_nang_cao/5_plotly/3_mau_sac_trong_truc_quan_hoa/h3_1.png')
            st.image('2_file_python_nang_cao/5_plotly/3_mau_sac_trong_truc_quan_hoa/h3_2.png')
            st.image('2_file_python_nang_cao/5_plotly/3_mau_sac_trong_truc_quan_hoa/h3_3.png')
            st.image('2_file_python_nang_cao/5_plotly/3_mau_sac_trong_truc_quan_hoa/h3_4.png')
            st.image('2_file_python_nang_cao/5_plotly/3_mau_sac_trong_truc_quan_hoa/h3_5.png')
            st.image('2_file_python_nang_cao/5_plotly/3_mau_sac_trong_truc_quan_hoa/h3_6.png')
            st.write('## 4. Trực quan hóa dữ liệu địa lý với Plotly')
            st.image('2_file_python_nang_cao/5_plotly/4_truc_quan_hoa_du_lieu_dia_ly_voi_plotly/h4_1.png')
            st.image('2_file_python_nang_cao/5_plotly/4_truc_quan_hoa_du_lieu_dia_ly_voi_plotly/h4_2.png')
            st.image('2_file_python_nang_cao/5_plotly/4_truc_quan_hoa_du_lieu_dia_ly_voi_plotly/h4_3.png')
            st.image('2_file_python_nang_cao/5_plotly/4_truc_quan_hoa_du_lieu_dia_ly_voi_plotly/h4_4.png')
            st.image('2_file_python_nang_cao/5_plotly/4_truc_quan_hoa_du_lieu_dia_ly_voi_plotly/h4_5.png')
            st.image('2_file_python_nang_cao/5_plotly/4_truc_quan_hoa_du_lieu_dia_ly_voi_plotly/h4_6.png')
            st.image('2_file_python_nang_cao/5_plotly/4_truc_quan_hoa_du_lieu_dia_ly_voi_plotly/h4_7.png')
            st.write('## 5. Tùy chỉnh biểu đồ')
            st.image('2_file_python_nang_cao/5_plotly/5_tuy_chinh_bieu_do/h5_1.png')
            st.image('2_file_python_nang_cao/5_plotly/5_tuy_chinh_bieu_do/h5_2.png')
            st.image('2_file_python_nang_cao/5_plotly/5_tuy_chinh_bieu_do/h5_3.png')
            st.image('2_file_python_nang_cao/5_plotly/5_tuy_chinh_bieu_do/h5_4.png')
            st.image('2_file_python_nang_cao/5_plotly/5_tuy_chinh_bieu_do/h5_5.png')
            st.image('2_file_python_nang_cao/5_plotly/5_tuy_chinh_bieu_do/h5_6.png')
            
    elif choice == 'sql':
        menu_sql=[]
        selected = st.selectbox("Mời bạn lựa chọn ?",menu_sql)
        st.write("Bạn chọn:", selected)

    elif choice == 'Data_Precessing_AND_Analysis':
        menu_Data_Precessing_AND_Analysis=['1_tong_quan_data_analysis','2_tong_quan_data_pre_precessing','3_data_pre_processing',
                                           '4_exploratory_data_analysis','5_feature_engineering','6_natural_language_processing',
                                           '7_linear_processing','8_logictis_regression','9_handling_imbalamced_dataset']
        selected = st.selectbox("Mời bạn lựa chọn ?",menu_Data_Precessing_AND_Analysis)
        st.write("Bạn chọn:", selected)
        if selected=='1_tong_quan_data_analysis':
            st.write('## Nội dung gồm:')
            st.write('1. Giới thiệu')
            st.write('2. Một số kỹ thuật phân tích dữ liệu')
            st.write('3. Một số công cụ phân tích dữ liệu')
            st.write('4. Quy trình phân tích dữ liệu')
            st.write('## 1. Giới thiệu')
            st.image('4_data_pre_processing_and_analysis/1_tong_quan_data_analysis/1_gioi_thieu/h1_1.png')
            st.image('4_data_pre_processing_and_analysis/1_tong_quan_data_analysis/1_gioi_thieu/h1_2.png')
            st.image('4_data_pre_processing_and_analysis/1_tong_quan_data_analysis/1_gioi_thieu/h1_3.png')
            st.image('4_data_pre_processing_and_analysis/1_tong_quan_data_analysis/1_gioi_thieu/h1_4.png')
            st.write('## 2. Một số kỹ thuật phân tích dữ liệu')
            st.image('4_data_pre_processing_and_analysis/1_tong_quan_data_analysis/2_mot_so_ky_thuat_phan_tich_du_lieu/h2_1.png')
            st.image('4_data_pre_processing_and_analysis/1_tong_quan_data_analysis/2_mot_so_ky_thuat_phan_tich_du_lieu/h2_2.png')
            st.image('4_data_pre_processing_and_analysis/1_tong_quan_data_analysis/2_mot_so_ky_thuat_phan_tich_du_lieu/h2_3.png')
            st.image('4_data_pre_processing_and_analysis/1_tong_quan_data_analysis/2_mot_so_ky_thuat_phan_tich_du_lieu/h2_4.png')
            st.image('4_data_pre_processing_and_analysis/1_tong_quan_data_analysis/2_mot_so_ky_thuat_phan_tich_du_lieu/h2_5.png')
            st.image('4_data_pre_processing_and_analysis/1_tong_quan_data_analysis/2_mot_so_ky_thuat_phan_tich_du_lieu/h2_6.png')
            st.image('4_data_pre_processing_and_analysis/1_tong_quan_data_analysis/2_mot_so_ky_thuat_phan_tich_du_lieu/h2_7.png')
            st.image('4_data_pre_processing_and_analysis/1_tong_quan_data_analysis/2_mot_so_ky_thuat_phan_tich_du_lieu/h2_8.png')
            st.image('4_data_pre_processing_and_analysis/1_tong_quan_data_analysis/2_mot_so_ky_thuat_phan_tich_du_lieu/h2_9.png')
            st.image('4_data_pre_processing_and_analysis/1_tong_quan_data_analysis/2_mot_so_ky_thuat_phan_tich_du_lieu/h2_10.png')
            st.image('4_data_pre_processing_and_analysis/1_tong_quan_data_analysis/2_mot_so_ky_thuat_phan_tich_du_lieu/h2_11.png')
            st.image('4_data_pre_processing_and_analysis/1_tong_quan_data_analysis/2_mot_so_ky_thuat_phan_tich_du_lieu/h2_12.png')
            st.image('4_data_pre_processing_and_analysis/1_tong_quan_data_analysis/2_mot_so_ky_thuat_phan_tich_du_lieu/h2_13.png')
            st.image('4_data_pre_processing_and_analysis/1_tong_quan_data_analysis/2_mot_so_ky_thuat_phan_tich_du_lieu/h2_14.png')
            st.image('4_data_pre_processing_and_analysis/1_tong_quan_data_analysis/2_mot_so_ky_thuat_phan_tich_du_lieu/h2_15.png')
            st.image('4_data_pre_processing_and_analysis/1_tong_quan_data_analysis/2_mot_so_ky_thuat_phan_tich_du_lieu/h2_16.png')
            st.image('4_data_pre_processing_and_analysis/1_tong_quan_data_analysis/2_mot_so_ky_thuat_phan_tich_du_lieu/h2_17.png')
            st.image('4_data_pre_processing_and_analysis/1_tong_quan_data_analysis/2_mot_so_ky_thuat_phan_tich_du_lieu/h2_18.png')
            st.image('4_data_pre_processing_and_analysis/1_tong_quan_data_analysis/2_mot_so_ky_thuat_phan_tich_du_lieu/h2_19.png')
            st.image('4_data_pre_processing_and_analysis/1_tong_quan_data_analysis/2_mot_so_ky_thuat_phan_tich_du_lieu/h2_20.png')
            st.write('## 3. Một số công cụ phân tích dữ liệu')
            st.image('4_data_pre_processing_and_analysis/1_tong_quan_data_analysis/3_mot_so_cong_cu_phan_tich_du_lieu/h3_1.png')
            st.image('4_data_pre_processing_and_analysis/1_tong_quan_data_analysis/3_mot_so_cong_cu_phan_tich_du_lieu/h3_2.png')
            st.image('4_data_pre_processing_and_analysis/1_tong_quan_data_analysis/3_mot_so_cong_cu_phan_tich_du_lieu/h3_3.png')
            st.image('4_data_pre_processing_and_analysis/1_tong_quan_data_analysis/3_mot_so_cong_cu_phan_tich_du_lieu/h3_4.png')
            st.write('## 4. Quy trình phân tích dữ liệu')
            st.image('4_data_pre_processing_and_analysis/1_tong_quan_data_analysis/4_quy_trinh_phan_tich_du_lieu/h4_1.png')
            st.image('4_data_pre_processing_and_analysis/1_tong_quan_data_analysis/4_quy_trinh_phan_tich_du_lieu/h4_2.png')
            st.image('4_data_pre_processing_and_analysis/1_tong_quan_data_analysis/4_quy_trinh_phan_tich_du_lieu/h4_3.png')
            st.image('4_data_pre_processing_and_analysis/1_tong_quan_data_analysis/4_quy_trinh_phan_tich_du_lieu/h4_4.png')
            st.image('4_data_pre_processing_and_analysis/1_tong_quan_data_analysis/4_quy_trinh_phan_tich_du_lieu/h4_5.png')
            st.image('4_data_pre_processing_and_analysis/1_tong_quan_data_analysis/4_quy_trinh_phan_tich_du_lieu/h4_6.png')
            st.image('4_data_pre_processing_and_analysis/1_tong_quan_data_analysis/4_quy_trinh_phan_tich_du_lieu/h4_7.png')
            st.image('4_data_pre_processing_and_analysis/1_tong_quan_data_analysis/4_quy_trinh_phan_tich_du_lieu/h4_8.png')
            st.image('4_data_pre_processing_and_analysis/1_tong_quan_data_analysis/4_quy_trinh_phan_tich_du_lieu/h4_9.png')
            st.image('4_data_pre_processing_and_analysis/1_tong_quan_data_analysis/4_quy_trinh_phan_tich_du_lieu/h4_10.png')
            st.image('4_data_pre_processing_and_analysis/1_tong_quan_data_analysis/4_quy_trinh_phan_tich_du_lieu/h4_11.png')
            st.image('4_data_pre_processing_and_analysis/1_tong_quan_data_analysis/4_quy_trinh_phan_tich_du_lieu/h4_12.png')
            st.image('4_data_pre_processing_and_analysis/1_tong_quan_data_analysis/4_quy_trinh_phan_tich_du_lieu/h4_13.png')
        elif selected=='2_tong_quan_data_pre_precessing':
            st.write('## Nội dung gồm:')
            st.write('1. Giới thiệu')
            st.write('2. Quy trình')
            st.write('## 1. Giới thiệu')
            st.image('4_data_pre_processing_and_analysis/2_tong_quan_data_pre_precessing/1_gioi_thieu/h1_1.png')
            st.image('4_data_pre_processing_and_analysis/2_tong_quan_data_pre_precessing/1_gioi_thieu/h1_2.png')
            st.image('4_data_pre_processing_and_analysis/2_tong_quan_data_pre_precessing/1_gioi_thieu/h1_3.png')
            st.image('4_data_pre_processing_and_analysis/2_tong_quan_data_pre_precessing/1_gioi_thieu/h1_4.png')
            st.image('4_data_pre_processing_and_analysis/2_tong_quan_data_pre_precessing/1_gioi_thieu/h1_5.png')
            st.image('4_data_pre_processing_and_analysis/2_tong_quan_data_pre_precessing/1_gioi_thieu/h1_6.png')
            st.image('4_data_pre_processing_and_analysis/2_tong_quan_data_pre_precessing/1_gioi_thieu/h1_7.png')
            st.image('4_data_pre_processing_and_analysis/2_tong_quan_data_pre_precessing/1_gioi_thieu/h1_8.png')
            st.image('4_data_pre_processing_and_analysis/2_tong_quan_data_pre_precessing/1_gioi_thieu/h1_9.png')
            st.write('## 2. Quy trình')
            st.image('4_data_pre_processing_and_analysis/2_tong_quan_data_pre_precessing/2_quy_trinh/h2_1.png')
            st.image('4_data_pre_processing_and_analysis/2_tong_quan_data_pre_precessing/2_quy_trinh/h2_2.png')
            st.image('4_data_pre_processing_and_analysis/2_tong_quan_data_pre_precessing/2_quy_trinh/h2_3.png')
            st.image('4_data_pre_processing_and_analysis/2_tong_quan_data_pre_precessing/2_quy_trinh/h2_4.png')
            st.image('4_data_pre_processing_and_analysis/2_tong_quan_data_pre_precessing/2_quy_trinh/h2_5.png')
            st.image('4_data_pre_processing_and_analysis/2_tong_quan_data_pre_precessing/2_quy_trinh/h2_6.png')
            st.image('4_data_pre_processing_and_analysis/2_tong_quan_data_pre_precessing/2_quy_trinh/h2_7.png')
            st.image('4_data_pre_processing_and_analysis/2_tong_quan_data_pre_precessing/2_quy_trinh/h2_8.png')
            st.image('4_data_pre_processing_and_analysis/2_tong_quan_data_pre_precessing/2_quy_trinh/h2_9.png')
            st.image('4_data_pre_processing_and_analysis/2_tong_quan_data_pre_precessing/2_quy_trinh/h2_10.png')
            st.image('4_data_pre_processing_and_analysis/2_tong_quan_data_pre_precessing/2_quy_trinh/h2_11.png')
            st.image('4_data_pre_processing_and_analysis/2_tong_quan_data_pre_precessing/2_quy_trinh/h2_12.png')
            st.image('4_data_pre_processing_and_analysis/2_tong_quan_data_pre_precessing/2_quy_trinh/h2_13.png')
            st.image('4_data_pre_processing_and_analysis/2_tong_quan_data_pre_precessing/2_quy_trinh/h2_14.png')
        elif selected=='3_data_pre_processing':
            st.write('## Nội dung gồm:')
            st.write('1. Giới thiệu')
            st.write('2. các bước thực hiện')
            st.write('3. Sử dụng package dataprep để làm sạch dữ liệu')
            st.write('## 1. Giới thiệu')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/1_gioi_thieu/h1_1.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/1_gioi_thieu/h1_2.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/1_gioi_thieu/h1_3.png')
            st.write('## 2. các bước thực hiện')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_1.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_2.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_3.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_4.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_5.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_6.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_7.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_8.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_9.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_10.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_11.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_12.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_13.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_14.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_15.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_16.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_17.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_18.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_19.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_20.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_21.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_22.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_23.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_24.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_25.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_26.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_27.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_28.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_29.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_30.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_31.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_32.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_33.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_34.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_35.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_36.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_37.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_38.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_39.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_40.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_41.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_42.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_43.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_44.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_45.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_46.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_47.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_48.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_49.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_50.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/2_cac_buoc_thuc_hien/h2_51.png')
            st.write('## 3. Sử dụng package dataprep để làm sạch dữ liệu')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/3_su_dung_package/h3_1.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/3_su_dung_package/h3_2.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/3_su_dung_package/h3_3.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/3_su_dung_package/h3_4.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/3_su_dung_package/h3_5.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/3_su_dung_package/h3_6.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/3_su_dung_package/h3_7.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/3_su_dung_package/h3_8.png')
            st.image('4_data_pre_processing_and_analysis/3_data_pre_processing/3_su_dung_package/h3_9.png')
        elif selected=='4_exploratory_data_analysis':
            st.write('## Nội dung gồm:')
            st.write('1. Giới thiệu EDA')
            st.write('2. Phân tích một biến, hai biến')
            st.write('3. Phát hiện và xử lý outlier')
            st.write('4. Các package EDA hữu ích')
            st.write('## 1. Giới thiệu EDA')
            st.image('4_data_pre_processing_and_analysis/4_exploratory_data_analysis/1_gioi_thieu_eda/h1_1.png')
            st.image('4_data_pre_processing_and_analysis/4_exploratory_data_analysis/1_gioi_thieu_eda/h1_2.png')
            st.image('4_data_pre_processing_and_analysis/4_exploratory_data_analysis/1_gioi_thieu_eda/h1_3.png')
            st.image('4_data_pre_processing_and_analysis/4_exploratory_data_analysis/1_gioi_thieu_eda/h1_4.png')
            st.image('4_data_pre_processing_and_analysis/4_exploratory_data_analysis/1_gioi_thieu_eda/h1_5.png')
            st.write('## 2. Phân tích một biến, hai biến')
            st.image('4_data_pre_processing_and_analysis/4_exploratory_data_analysis/2_phan_tich_mot_bien_hai_bien/h2_1.png')
            st.image('4_data_pre_processing_and_analysis/4_exploratory_data_analysis/2_phan_tich_mot_bien_hai_bien/h2_2.png')
            st.image('4_data_pre_processing_and_analysis/4_exploratory_data_analysis/2_phan_tich_mot_bien_hai_bien/h2_3.png')
            st.image('4_data_pre_processing_and_analysis/4_exploratory_data_analysis/2_phan_tich_mot_bien_hai_bien/h2_4.png')
            st.image('4_data_pre_processing_and_analysis/4_exploratory_data_analysis/2_phan_tich_mot_bien_hai_bien/h2_5.png')
            st.image('4_data_pre_processing_and_analysis/4_exploratory_data_analysis/2_phan_tich_mot_bien_hai_bien/h2_6.png')
            st.image('4_data_pre_processing_and_analysis/4_exploratory_data_analysis/2_phan_tich_mot_bien_hai_bien/h2_7.png')
            st.image('4_data_pre_processing_and_analysis/4_exploratory_data_analysis/2_phan_tich_mot_bien_hai_bien/h2_8.png')
            st.image('4_data_pre_processing_and_analysis/4_exploratory_data_analysis/2_phan_tich_mot_bien_hai_bien/h2_9.png')
            st.image('4_data_pre_processing_and_analysis/4_exploratory_data_analysis/2_phan_tich_mot_bien_hai_bien/h2_10.png')
            st.image('4_data_pre_processing_and_analysis/4_exploratory_data_analysis/2_phan_tich_mot_bien_hai_bien/h2_11.png')
            st.image('4_data_pre_processing_and_analysis/4_exploratory_data_analysis/2_phan_tich_mot_bien_hai_bien/h2_12.png')
            st.image('4_data_pre_processing_and_analysis/4_exploratory_data_analysis/2_phan_tich_mot_bien_hai_bien/h2_13.png')
            st.image('4_data_pre_processing_and_analysis/4_exploratory_data_analysis/2_phan_tich_mot_bien_hai_bien/h2_14.png')
            st.image('4_data_pre_processing_and_analysis/4_exploratory_data_analysis/2_phan_tich_mot_bien_hai_bien/h2_15.png')
            st.image('4_data_pre_processing_and_analysis/4_exploratory_data_analysis/2_phan_tich_mot_bien_hai_bien/h2_16.png')
            st.image('4_data_pre_processing_and_analysis/4_exploratory_data_analysis/2_phan_tich_mot_bien_hai_bien/h2_17.png')
            st.image('4_data_pre_processing_and_analysis/4_exploratory_data_analysis/2_phan_tich_mot_bien_hai_bien/h2_18.png')
            st.write('## 3. Phát hiện và xử lý outlier')
            st.image('4_data_pre_processing_and_analysis/4_exploratory_data_analysis/3_phat_hien_va_xu_ly_outlier/h3_1.png')
            st.image('4_data_pre_processing_and_analysis/4_exploratory_data_analysis/3_phat_hien_va_xu_ly_outlier/h3_2.png')
            st.image('4_data_pre_processing_and_analysis/4_exploratory_data_analysis/3_phat_hien_va_xu_ly_outlier/h3_3.png')
            st.image('4_data_pre_processing_and_analysis/4_exploratory_data_analysis/3_phat_hien_va_xu_ly_outlier/h3_4.png')
            st.write('## 4. Các package EDA hữu ích')
            st.image('4_data_pre_processing_and_analysis/4_exploratory_data_analysis/4_cac_package_huu_ich/h4_1.png')
            st.image('4_data_pre_processing_and_analysis/4_exploratory_data_analysis/4_cac_package_huu_ich/h4_2.png')
            st.image('4_data_pre_processing_and_analysis/4_exploratory_data_analysis/4_cac_package_huu_ich/h4_3.png')
        elif selected=='5_feature_engineering':
            st.write('## Nội dung gồm:')
            st.write('1. Giới thiệu')
            st.write('2. Tạo thược tính (feature)')
            st.write('3. Chuẩn hóa dữ liệu (Data Standardization)')
            st.write('4. Chuyển dạng dữ liệu (Transformation)')
            st.write('## Nội dung gồm:')
            st.write('## 1. Giới thiệu')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/1_gioi_thieu/h1_1.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/1_gioi_thieu/h1_2.png')
            st.write('## 2. Tạo thược tính (feature)')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/2_tao_thuoc_tinh/h2_1.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/2_tao_thuoc_tinh/h2_2.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/2_tao_thuoc_tinh/h2_3.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/2_tao_thuoc_tinh/h2_4.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/2_tao_thuoc_tinh/h2_5.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/2_tao_thuoc_tinh/h2_6.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/2_tao_thuoc_tinh/h2_7.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/2_tao_thuoc_tinh/h2_8.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/2_tao_thuoc_tinh/h2_9.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/2_tao_thuoc_tinh/h2_10.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/2_tao_thuoc_tinh/h2_11.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/2_tao_thuoc_tinh/h2_12.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/2_tao_thuoc_tinh/h2_13.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/2_tao_thuoc_tinh/h2_14.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/2_tao_thuoc_tinh/h2_15.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/2_tao_thuoc_tinh/h2_16.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/2_tao_thuoc_tinh/h2_17.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/2_tao_thuoc_tinh/h2_18.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/2_tao_thuoc_tinh/h2_19.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/2_tao_thuoc_tinh/h2_20.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/2_tao_thuoc_tinh/h2_21.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/2_tao_thuoc_tinh/h2_22.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/2_tao_thuoc_tinh/h2_23.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/2_tao_thuoc_tinh/h2_24.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/2_tao_thuoc_tinh/h2_25.png')       
            st.write('## 3. Chuẩn hóa dữ liệu (Data Standardization)')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/3_chuan_hoa_du_lieu/h3_1.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/3_chuan_hoa_du_lieu/h3_2.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/3_chuan_hoa_du_lieu/h3_3.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/3_chuan_hoa_du_lieu/h3_4.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/3_chuan_hoa_du_lieu/h3_5.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/3_chuan_hoa_du_lieu/h3_6.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/3_chuan_hoa_du_lieu/h3_7.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/3_chuan_hoa_du_lieu/h3_8.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/3_chuan_hoa_du_lieu/h3_9.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/3_chuan_hoa_du_lieu/h3_10.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/3_chuan_hoa_du_lieu/h3_11.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/3_chuan_hoa_du_lieu/h3_12.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/3_chuan_hoa_du_lieu/h3_13.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/3_chuan_hoa_du_lieu/h3_14.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/3_chuan_hoa_du_lieu/h3_15.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/3_chuan_hoa_du_lieu/h3_16.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/3_chuan_hoa_du_lieu/h3_17.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/3_chuan_hoa_du_lieu/h3_18.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/3_chuan_hoa_du_lieu/h3_19.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/3_chuan_hoa_du_lieu/h3_20.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/3_chuan_hoa_du_lieu/h3_21.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/3_chuan_hoa_du_lieu/h3_22.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/3_chuan_hoa_du_lieu/h3_23.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/3_chuan_hoa_du_lieu/h3_24.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/3_chuan_hoa_du_lieu/h3_25.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/3_chuan_hoa_du_lieu/h3_26.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/3_chuan_hoa_du_lieu/h3_27.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/3_chuan_hoa_du_lieu/h3_28.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/3_chuan_hoa_du_lieu/h3_29.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/3_chuan_hoa_du_lieu/h3_30.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/3_chuan_hoa_du_lieu/h3_31.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/3_chuan_hoa_du_lieu/h3_32.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/3_chuan_hoa_du_lieu/h3_33.png')            
            st.write('## 4. Chuyển dạng dữ liệu (Transformation)') 
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/4_chuyen_dang_du_lieu/h4_1.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/4_chuyen_dang_du_lieu/h4_2.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/4_chuyen_dang_du_lieu/h4_3.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/4_chuyen_dang_du_lieu/h4_4.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/4_chuyen_dang_du_lieu/h4_5.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/4_chuyen_dang_du_lieu/h4_6.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/4_chuyen_dang_du_lieu/h4_7.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/4_chuyen_dang_du_lieu/h4_8.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/4_chuyen_dang_du_lieu/h4_9.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/4_chuyen_dang_du_lieu/h4_10.png')
            st.image('4_data_pre_processing_and_analysis/5_feature_engineering/4_chuyen_dang_du_lieu/h4_11.png')
        elif selected=='6_natural_language_processing':
            st.write('## Nội dung gồm:')
            st.write('1. Tổng quan')
            st.write('2. Các thư viện hổ trợ NLP phổ biến')
            st.write('3. Text data pre-processing')
            st.write('4. Text data transfromation')
            st.write('5. Tiền xử lý tài liệu tiếng Việt')
            st.write('## 1. Tổng quan')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/1_tong_quan/h1_1.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/1_tong_quan/h1_2.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/1_tong_quan/h1_3.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/1_tong_quan/h1_4.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/1_tong_quan/h1_5.png')
            st.write('## 2. Các thư viện hổ trợ NLP phổ biến')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/2_cac_thu_vien_ho_tro_nlp_pho_bien/h2_1.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/2_cac_thu_vien_ho_tro_nlp_pho_bien/h2_2.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/2_cac_thu_vien_ho_tro_nlp_pho_bien/h2_3.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/2_cac_thu_vien_ho_tro_nlp_pho_bien/h2_4.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/2_cac_thu_vien_ho_tro_nlp_pho_bien/h2_5.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/2_cac_thu_vien_ho_tro_nlp_pho_bien/h2_6.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/2_cac_thu_vien_ho_tro_nlp_pho_bien/h2_7.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/2_cac_thu_vien_ho_tro_nlp_pho_bien/h2_8.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/2_cac_thu_vien_ho_tro_nlp_pho_bien/h2_9.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/2_cac_thu_vien_ho_tro_nlp_pho_bien/h2_10.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/2_cac_thu_vien_ho_tro_nlp_pho_bien/h2_11.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/2_cac_thu_vien_ho_tro_nlp_pho_bien/h2_12.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/2_cac_thu_vien_ho_tro_nlp_pho_bien/h2_13.png')
            st.write('## 3. Text data pre-processing')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/3_text_data_pre_processing/h3_1.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/3_text_data_pre_processing/h3_2.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/3_text_data_pre_processing/h3_3.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/3_text_data_pre_processing/h3_4.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/3_text_data_pre_processing/h3_5.png')
            st.write('## 4. Text data transfromation')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/4_text_data_transformation/h4_1.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/4_text_data_transformation/h4_2.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/4_text_data_transformation/h4_3.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/4_text_data_transformation/h4_4.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/4_text_data_transformation/h4_5.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/4_text_data_transformation/h4_6.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/4_text_data_transformation/h4_7.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/4_text_data_transformation/h4_8.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/4_text_data_transformation/h4_9.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/4_text_data_transformation/h4_10.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/4_text_data_transformation/h4_11.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/4_text_data_transformation/h4_12.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/4_text_data_transformation/h4_13.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/4_text_data_transformation/h4_14.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/4_text_data_transformation/h4_15.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/4_text_data_transformation/h4_16.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/4_text_data_transformation/h4_17.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/4_text_data_transformation/h4_18.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/4_text_data_transformation/h4_19.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/4_text_data_transformation/h4_20.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/4_text_data_transformation/h4_21.png')
            st.write('## 5. Tiền xử lý tài liệu tiếng Việt')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/5_tien_xu_ly_tai_lieu_tieng_viet/h5_1.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/5_tien_xu_ly_tai_lieu_tieng_viet/h5_2.png')
            st.image('4_data_pre_processing_and_analysis/6_natural_language_processing/5_tien_xu_ly_tai_lieu_tieng_viet/h5_3.png')
        elif selected=='7_linear_processing':
            st.write('## Nội dung gồm:')
            st.write('1. Hồi quy tuyến tính')
            st.write('2. Hồi quy đơn biến')
            st.write('3. Hồi quy đa biến')
            st.write('4. Hồi quy đa thức')
            st.write('5. Một số kỹ thuật thực hiện trên mô hình')
            st.write('## 1. Hồi quy tuyến tính')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/1_hoi_quy_tuyen_tinh/h1_1.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/1_hoi_quy_tuyen_tinh/h1_2.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/1_hoi_quy_tuyen_tinh/h1_3.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/1_hoi_quy_tuyen_tinh/h1_4.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/1_hoi_quy_tuyen_tinh/h1_5.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/1_hoi_quy_tuyen_tinh/h1_6.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/1_hoi_quy_tuyen_tinh/h1_7.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/1_hoi_quy_tuyen_tinh/h1_8.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/1_hoi_quy_tuyen_tinh/h1_9.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/1_hoi_quy_tuyen_tinh/h1_10.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/1_hoi_quy_tuyen_tinh/h1_11.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/1_hoi_quy_tuyen_tinh/h1_12.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/1_hoi_quy_tuyen_tinh/h1_13.png')
            st.write('## 2. Hồi quy đơn biến')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/2_hoi_quy_don_bien/h2_1.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/2_hoi_quy_don_bien/h2_2.png')
            st.write('## 3. Hồi quy đa biến')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/3_hoi_quy_da_bien/h3_1.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/3_hoi_quy_da_bien/h3_2.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/3_hoi_quy_da_bien/h3_3.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/3_hoi_quy_da_bien/h3_4.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/3_hoi_quy_da_bien/h3_5.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/3_hoi_quy_da_bien/h3_6.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/3_hoi_quy_da_bien/h3_7.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/3_hoi_quy_da_bien/h3_8.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/3_hoi_quy_da_bien/h3_9.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/3_hoi_quy_da_bien/h3_10.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/3_hoi_quy_da_bien/h3_11.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/3_hoi_quy_da_bien/h3_12.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/3_hoi_quy_da_bien/h3_13.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/3_hoi_quy_da_bien/h3_14.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/3_hoi_quy_da_bien/h3_15.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/3_hoi_quy_da_bien/h3_16.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/3_hoi_quy_da_bien/h3_17.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/3_hoi_quy_da_bien/h3_18.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/3_hoi_quy_da_bien/h3_19.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/3_hoi_quy_da_bien/h3_20.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/3_hoi_quy_da_bien/h3_21.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/3_hoi_quy_da_bien/h3_22.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/3_hoi_quy_da_bien/h3_23.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/3_hoi_quy_da_bien/h3_24.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/3_hoi_quy_da_bien/h3_25.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/3_hoi_quy_da_bien/h3_26.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/3_hoi_quy_da_bien/h3_27.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/3_hoi_quy_da_bien/h3_28.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/3_hoi_quy_da_bien/h3_29.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/3_hoi_quy_da_bien/h3_30.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/3_hoi_quy_da_bien/h3_31.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/3_hoi_quy_da_bien/h3_32.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/3_hoi_quy_da_bien/h3_33.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/3_hoi_quy_da_bien/h3_34.png')
            st.write('## 4. Hồi quy đa thức')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/4_hoi_quy_da_thuc/h4_1.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/4_hoi_quy_da_thuc/h4_2.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/4_hoi_quy_da_thuc/h4_3.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/4_hoi_quy_da_thuc/h4_4.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/4_hoi_quy_da_thuc/h4_5.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/4_hoi_quy_da_thuc/h4_6.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/4_hoi_quy_da_thuc/h4_7.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/4_hoi_quy_da_thuc/h4_8.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/4_hoi_quy_da_thuc/h4_9.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/4_hoi_quy_da_thuc/h4_10.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/4_hoi_quy_da_thuc/h4_11.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/4_hoi_quy_da_thuc/h4_12.png')
            st.write('## 5. Một số kỹ thuật thực hiện trên mô hình')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/5_mot_so_ky_thuat_thuc_hien_tren_mo_hinh/h5_1.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/5_mot_so_ky_thuat_thuc_hien_tren_mo_hinh/h5_2.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/5_mot_so_ky_thuat_thuc_hien_tren_mo_hinh/h5_3.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/5_mot_so_ky_thuat_thuc_hien_tren_mo_hinh/h5_4.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/5_mot_so_ky_thuat_thuc_hien_tren_mo_hinh/h5_5.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/5_mot_so_ky_thuat_thuc_hien_tren_mo_hinh/h5_6.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/5_mot_so_ky_thuat_thuc_hien_tren_mo_hinh/h5_7.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/5_mot_so_ky_thuat_thuc_hien_tren_mo_hinh/h5_8.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/5_mot_so_ky_thuat_thuc_hien_tren_mo_hinh/h5_9.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/5_mot_so_ky_thuat_thuc_hien_tren_mo_hinh/h5_10.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/5_mot_so_ky_thuat_thuc_hien_tren_mo_hinh/h5_11.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/5_mot_so_ky_thuat_thuc_hien_tren_mo_hinh/h5_12.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/5_mot_so_ky_thuat_thuc_hien_tren_mo_hinh/h5_13.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/5_mot_so_ky_thuat_thuc_hien_tren_mo_hinh/h5_14.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/5_mot_so_ky_thuat_thuc_hien_tren_mo_hinh/h5_15.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/5_mot_so_ky_thuat_thuc_hien_tren_mo_hinh/h5_16.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/5_mot_so_ky_thuat_thuc_hien_tren_mo_hinh/h5_17.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/5_mot_so_ky_thuat_thuc_hien_tren_mo_hinh/h5_18.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/5_mot_so_ky_thuat_thuc_hien_tren_mo_hinh/h5_19.png')
            st.image('4_data_pre_processing_and_analysis/7_linear_processing/5_mot_so_ky_thuat_thuc_hien_tren_mo_hinh/h5_20.png')
        elif selected=='8_logictis_regression':
            st.write('## Nội dung gồm:')
            st.write('1. Logistic regression')
            st.write('2. Xây dựng logistic regression model')
            st.write('## 1. Logistic regression')
            st.image('4_data_pre_processing_and_analysis/8_logictis_regression/1_logistic_regression/h1_1.png')
            st.image('4_data_pre_processing_and_analysis/8_logictis_regression/1_logistic_regression/h1_2.png')
            st.image('4_data_pre_processing_and_analysis/8_logictis_regression/1_logistic_regression/h1_3.png')
            st.image('4_data_pre_processing_and_analysis/8_logictis_regression/1_logistic_regression/h1_4.png')
            st.image('4_data_pre_processing_and_analysis/8_logictis_regression/1_logistic_regression/h1_5.png')
            st.image('4_data_pre_processing_and_analysis/8_logictis_regression/1_logistic_regression/h1_6.png')
            st.image('4_data_pre_processing_and_analysis/8_logictis_regression/1_logistic_regression/h1_7.png')
            st.image('4_data_pre_processing_and_analysis/8_logictis_regression/1_logistic_regression/h1_8.png')
            st.image('4_data_pre_processing_and_analysis/8_logictis_regression/1_logistic_regression/h1_9.png')
            st.image('4_data_pre_processing_and_analysis/8_logictis_regression/1_logistic_regression/h1_10.png')
            st.image('4_data_pre_processing_and_analysis/8_logictis_regression/1_logistic_regression/h1_11.png')
            st.image('4_data_pre_processing_and_analysis/8_logictis_regression/1_logistic_regression/h1_12.png')
            st.image('4_data_pre_processing_and_analysis/8_logictis_regression/1_logistic_regression/h1_13.png')
            st.write('## 2. Xây dựng logistic regression model')
            st.image('4_data_pre_processing_and_analysis/8_logictis_regression/2_xay_dung_logistic_regression_model/h2_1.png')
            st.image('4_data_pre_processing_and_analysis/8_logictis_regression/2_xay_dung_logistic_regression_model/h2_2.png')
            st.image('4_data_pre_processing_and_analysis/8_logictis_regression/2_xay_dung_logistic_regression_model/h2_3.png')
            st.image('4_data_pre_processing_and_analysis/8_logictis_regression/2_xay_dung_logistic_regression_model/h2_4.png')
            st.image('4_data_pre_processing_and_analysis/8_logictis_regression/2_xay_dung_logistic_regression_model/h2_5.png')
            st.image('4_data_pre_processing_and_analysis/8_logictis_regression/2_xay_dung_logistic_regression_model/h2_6.png')
            st.image('4_data_pre_processing_and_analysis/8_logictis_regression/2_xay_dung_logistic_regression_model/h2_7.png')
            st.image('4_data_pre_processing_and_analysis/8_logictis_regression/2_xay_dung_logistic_regression_model/h2_8.png')
            st.image('4_data_pre_processing_and_analysis/8_logictis_regression/2_xay_dung_logistic_regression_model/h2_9.png')
            st.image('4_data_pre_processing_and_analysis/8_logictis_regression/2_xay_dung_logistic_regression_model/h2_10.png')
        elif selected=='9_handling_imbalamced_dataset':
            st.write('## Nội dung gồm:')
            st.write('1. Giới thiệu')
            st.write('2. Chiến thuật làm việc với dứ liệu mất cân bằng (Imbalanced Dataset)')
            st.write('## 1. Giới thiệu')
            st.image('4_data_pre_processing_and_analysis/9_handling_imbalamced_dataset/1_gioi_thieu/h1_1.png')
            st.image('4_data_pre_processing_and_analysis/9_handling_imbalamced_dataset/1_gioi_thieu/h1_2.png')
            st.image('4_data_pre_processing_and_analysis/9_handling_imbalamced_dataset/1_gioi_thieu/h1_3.png')
            st.image('4_data_pre_processing_and_analysis/9_handling_imbalamced_dataset/1_gioi_thieu/h1_4.png')
            st.image('4_data_pre_processing_and_analysis/9_handling_imbalamced_dataset/1_gioi_thieu/h1_5.png')
            st.image('4_data_pre_processing_and_analysis/9_handling_imbalamced_dataset/1_gioi_thieu/h1_6.png')
            st.image('4_data_pre_processing_and_analysis/9_handling_imbalamced_dataset/1_gioi_thieu/h1_7.png')
            st.image('4_data_pre_processing_and_analysis/9_handling_imbalamced_dataset/1_gioi_thieu/h1_8.png')
            st.write('## 2. Chiến thuật làm việc với dứ liệu mất cân bằng (Imbalanced Dataset)')
            st.image('4_data_pre_processing_and_analysis/9_handling_imbalamced_dataset/2_chien_thuat_lam_viec/h2_1.png')
            st.image('4_data_pre_processing_and_analysis/9_handling_imbalamced_dataset/2_chien_thuat_lam_viec/h2_2.png')
            st.image('4_data_pre_processing_and_analysis/9_handling_imbalamced_dataset/2_chien_thuat_lam_viec/h2_3.png')
            st.image('4_data_pre_processing_and_analysis/9_handling_imbalamced_dataset/2_chien_thuat_lam_viec/h2_4.png')
            st.image('4_data_pre_processing_and_analysis/9_handling_imbalamced_dataset/2_chien_thuat_lam_viec/h2_5.png')
            st.image('4_data_pre_processing_and_analysis/9_handling_imbalamced_dataset/2_chien_thuat_lam_viec/h2_6.png')
            st.image('4_data_pre_processing_and_analysis/9_handling_imbalamced_dataset/2_chien_thuat_lam_viec/h2_7.png')
            st.image('4_data_pre_processing_and_analysis/9_handling_imbalamced_dataset/2_chien_thuat_lam_viec/h2_8.png')
            st.image('4_data_pre_processing_and_analysis/9_handling_imbalamced_dataset/2_chien_thuat_lam_viec/h2_9.png')
            st.image('4_data_pre_processing_and_analysis/9_handling_imbalamced_dataset/2_chien_thuat_lam_viec/h2_10.png')
            st.image('4_data_pre_processing_and_analysis/9_handling_imbalamced_dataset/2_chien_thuat_lam_viec/h2_11.png')
            st.image('4_data_pre_processing_and_analysis/9_handling_imbalamced_dataset/2_chien_thuat_lam_viec/h2_12.png')
            st.image('4_data_pre_processing_and_analysis/9_handling_imbalamced_dataset/2_chien_thuat_lam_viec/h2_13.png')
            st.image('4_data_pre_processing_and_analysis/9_handling_imbalamced_dataset/2_chien_thuat_lam_viec/h2_14.png')
            st.image('4_data_pre_processing_and_analysis/9_handling_imbalamced_dataset/2_chien_thuat_lam_viec/h2_15.png')
            st.image('4_data_pre_processing_and_analysis/9_handling_imbalamced_dataset/2_chien_thuat_lam_viec/h2_16.png')
            st.image('4_data_pre_processing_and_analysis/9_handling_imbalamced_dataset/2_chien_thuat_lam_viec/h2_17.png')
            st.image('4_data_pre_processing_and_analysis/9_handling_imbalamced_dataset/2_chien_thuat_lam_viec/h2_18.png')
            st.image('4_data_pre_processing_and_analysis/9_handling_imbalamced_dataset/2_chien_thuat_lam_viec/h2_19.png')
            st.image('4_data_pre_processing_and_analysis/9_handling_imbalamced_dataset/2_chien_thuat_lam_viec/h2_20.png')
            st.image('4_data_pre_processing_and_analysis/9_handling_imbalamced_dataset/2_chien_thuat_lam_viec/h2_21.png')
            st.image('4_data_pre_processing_and_analysis/9_handling_imbalamced_dataset/2_chien_thuat_lam_viec/h2_22.png')
            st.image('4_data_pre_processing_and_analysis/9_handling_imbalamced_dataset/2_chien_thuat_lam_viec/h2_23.png')
            st.image('4_data_pre_processing_and_analysis/9_handling_imbalamced_dataset/2_chien_thuat_lam_viec/h2_24.png')
            st.image('4_data_pre_processing_and_analysis/9_handling_imbalamced_dataset/2_chien_thuat_lam_viec/h2_25.png')
            st.image('4_data_pre_processing_and_analysis/9_handling_imbalamced_dataset/2_chien_thuat_lam_viec/h2_26.png')
            st.image('4_data_pre_processing_and_analysis/9_handling_imbalamced_dataset/2_chien_thuat_lam_viec/h2_27.png')
            st.image('4_data_pre_processing_and_analysis/9_handling_imbalamced_dataset/2_chien_thuat_lam_viec/h2_28.png')
            st.image('4_data_pre_processing_and_analysis/9_handling_imbalamced_dataset/2_chien_thuat_lam_viec/h2_29.png')
            st.image('4_data_pre_processing_and_analysis/9_handling_imbalamced_dataset/2_chien_thuat_lam_viec/h2_30.png')
            st.image('4_data_pre_processing_and_analysis/9_handling_imbalamced_dataset/2_chien_thuat_lam_viec/h2_31.png')
    elif choice == 'Machine_Learning':
        menu_Machine_Learning=[]
        selected = st.selectbox("Mời bạn lựa chọn ?",menu_Machine_Learning)
        st.write("Bạn chọn:", selected)

    elif choice == 'Big_data':
        menu_Big_data=[]
        selected = st.selectbox("Mời bạn lựa chọn ?",menu_Big_data)
        st.write("Bạn chọn:", selected)
    elif choice == 'model':
        menu_model=['naivebayers','knn','logistics','linear','decision_tree','random_forest','svm','cross_val_score','gridsearchcv','pca',
        'adaboost','xgboost','catboost','lightgbm','pineline','selectkbest','cross-validation','imbalanced','Multicollinearity','nlp']
        selected = st.selectbox("Mời bạn lựa chọn ?",menu_model)
        st.write("Bạn chọn:", selected)
        if selected == 'naivebayers':
            st.write('## Naive Bayers')
            st.write('## Mô hình phân loại')
            st.write('### from textblob.classifiers import NaiveBayesClassifier')
            st.write('##### Train/test')
            st.write('##### Build model')
            st.write('cl = NaiveBayesClassifier(train_random_sample)')
            st.write('##### Compute accuracy (đánh giá)')
            st.write('print("Accuracy: {0}".format(cl.accuracy(test_random_sample)))')
            st.write('##### classify some text (kiểm tra)')
            st.write('print(cl.classify("Tomorrow We will work from home."))')
            st.write('##### Hiển thị các tính năng có nhiều thông tin nhất')
            st.write('cl.show_informative_features(10)')
            st.write('Sử dụng textblob')
            st.write('Lệnh: from textblob import TextBlob')
            st.write('blob = TextBlob("Tomorrow We will work from home weekly.", classifier=cl)')
            st.write('blob.classify()')
            st.write('## Sklearn')
            st.write('### from sklearn.naive_bayes import MultinomialNB')
            st.write('model=MultinomialNB()')
            st.write('model.fit(X_train,y_train)')
            st.write('model.score(X_train,y_train)')
            st.write('### from sklearn.naive_bayes import BernoulliNB')
            st.write('clf = BernoulliNB()')
            st.write('clf.fit(X_now, Y_now)')
            st.write('predicted= clf.predict(X_new)')
            st.write('clf.predict_proba(X_new)')
            st.write('### from sklearn.naive_bayes import GaussianNB')
            st.write('model = GaussianNB()')
            st.write('model.fit(X_now, Y_now)')
            st.write('predicted= model.predict(X_new)')
            st.write('model.predict_proba(X_new)')
            st.write('')

        elif selected == 'knn':
            st.write('## Kneighbors')
            st.write('## Mô hình phân loại')
            st.write('### from sklearn.neighbors import KNeighborsClassifier')
            st.write('##### Lưu ý:')
            st.write('- k nên là số lẻ, k>1, k!=N')
            st.write('- k mặc định = 5')
            st.write('## Tìm k')
            st.write('khoang_k=int((X_train.shape[0]**0.5)/2)')
            st.write('##### cách 1:')
            st.write('''\n
                    train_acc = []\n
                    test_acc = []\n
                    for k in range(2,11):\n
                    ----neigh = KNeighborsClassifier(n_neighbors=k) #md:5\n
                    ----neigh.fit(X_train, y_train)\n
                    ----tr_ac = neigh.score(X_train,y_train)\n
                    ----te_ac = neigh.score(X_test,y_test)\n
                    ----train_acc.append(tr_ac)\n
                    ----test_acc.append(te_ac)
                    ''')
            st.write('## Trực quan tìm k phù hợp')
            st.write('''\n
                    X_label = list(range(2,11))\n
                    plt.plot(X_label,train_acc,label='train_acc')\n
                    plt.plot(X_label,test_acc,label='test_acc')\n
                    plt.legend()\n
                    plt.show()
                    ''')
            st.write('### from sklearn.metrics import classification_report')
            st.write('Đánh giá với các gt k ')
            st.write('''
                    fk=7
                    neigh = KNeighborsClassifier(n_neighbors=fk)
                    neigh.fit(X_train, y_train)
                    preds = neigh.predict(X_test)
                    print(classification_report(y_test,preds,digits=4))
                    ''')
            st.write('##### cách 2:')
            st.write('''\n
                    list_k=[]\n
                    list_acc=[]\n
                    for k in range(2,khoang_k):\n
                    ----list_k.append(k)\n
                    ----neigh=KNeighborsClassifier(n_neighbors=k)\n
                    ----neigh.fit(X_train,y_train)\n
                    ----y_pred=neigh.predict(X_test)\n
                    ----acc=accuracy_score(y_test,y_pred)*100\n
                    ----list_acc.append(acc)\n
                    ----print('k = ', k,'Accuracy =', accuracy_score(y_test,y_pred))
                    ''')
            st.write('list_acc.index(max(list_acc))')
            st.write('vi_tri=list_acc.index(max(list_acc))')
            st.write('k=list_k[vi_tri]')
            st.write('k=list_k[vi_tri]')
            st.write('k,list_acc[vi_tri]')
            st.write('''\n
                    plt.plot(list_k,list_acc)\n
                    plt.xlabel('Number of Neighbors K')\n
                    plt.ylabel('Test Accuracy')
                    ''')
            st.write('''\n
                    for i in (4,6): # 4 và 6 là nhìn trên bảng đồ\n
                    ----knn=KNeighborsClassifier()\n
                    ----knn.fit(X_train,y_train)\n
                    ----print(f'k = {i}, train acc = {knn.score(X_train,y_train)}')\n
                    ----print(f'k = {i}, test acc = {knn.score(X_test,y_test)}')\n
                    ----print('**********')
                    ''')
            st.write('### Xây dụng mô hình và huấn luyên')
            st.write('knn = KNeighborsClassifier(n_neighbors=6)')
            st.write('knn.fit(X_train, y_train)')
            st.write('### Đánh giá')
            st.write('### from sklearn.metrics import confusion_matrix, classification_report')
            st.write('''\n
                    print("The Train prediction accuracy is: ",\n
                    knn.score(X_train,y_train)*100,"%")\n
                    print("The Test prediction accuracy is: ",\n
                    knn.score(X_test,y_test)*100,"%")
                    ''')
            st.write('y_pred = knn.predict(X_test)')
            st.write('confusion_matrix(y_test,y_pred)')
            st.write('print(classification_report(y_test,y_pred))')
            st.write('### Trực quan heatmap')
            st.write('data_sub = data.iloc[:,[2,3,5,4]]')
            st.write('corrmat=data_sub.corr()')
            st.write('top_corr_features = corrmat.index')
            st.write('data[top_corr_features].corr()')
            st.write('''\n
            plt.figure(figsize=(10,10))\n
            sns.heatmap(data[top_corr_features].corr(), cmap="RdYlGn", annot=True) # annot=True: nếu muốn in cả giá trị
                    ''')
            st.write('### Selectkbest')
            st.write('### from sklearn.feature_selection import SelectKBest, chi2')
            st.write('slk=SelectKBest(score_func=chi2,k=\'all\')')
            st.write('fit=slk.fit(X,y)')
            st.write('dfscores=pd.DataFrame(fit.scores_)')
            st.write('fit=slk.fit(X,y)')
            st.write('dfscores=pd.DataFrame(fit.scores_)')
            st.write('dfcolumns=pd.DataFrame(X.columns)')
            st.write('''\n
                    featureScores = pd.concat([dfcolumns,dfscores],axis=1)\n
                    featureScores.columns = ['Specs','Score'] #naming the dataframe columns\n
                    print(featureScores.nlargest(4,'Score')) #print 4 best features
                                        ''')
            st.write('### Chuẩn hóa và lựa chọn lại k')
            st.write('## Mô hình liên tục')
            st.write('### from sklearn.neighbors import KNeighborsRegressor')
            st.write('')
        elif selected == 'logistics':
            st.write('## Logistic Regression')
            st.write('### from sklearn.linear_model import LogisticRegression')
            st.write('## Xây dựng model')
            st.write('model = LogisticRegression()')
            st.write('## Huấn luyện mô hình')
            st.write('model.fit(X_train, y_train)')
            st.write('## Đánh giá mô hình')
            st.write('print(model.intercept_)')
            st.write('print(model.coef_)')
            st.write('model.classes_ : xem lớp')
            st.write('print(\'Train Accuracy Score:\', model.score(X_train, y_train))')
            st.write('print(\'Test Accuracy Score:\', model.score(X_test, y_test))')
            st.write('### from sklearn.metrics import accuracy_score')
            st.write('### from sklearn.metrics import precision_score, recall_score, f1_score')
            st.write('y_pred = model.predict(X_test)')
            st.write('accuracy = accuracy_score(y_test, y_pred)')
            st.write('y_pred_prob = model.predict_proba(X_test)')
            st.write('precision = precision_score(y_test,y_pred,average=\'macro\')')
            st.write('recall = recall_score(y_test,y_pred,average=\'macro\')')
            st.write('f1 = f1_score(y_test,y_pred)')
            st.write('## Dự đoán')
            st.write('y_now = model.predict(X_now)')
            st.write('y_proba = model.predict_proba(X_new)')
            st.write('')
            st.write('')
            st.write('')
        elif selected == 'linear':
            st.write('## Linear Regression')
            st.write('### from sklearn.linear_model import LinearRegression')
            st.write('## Xây dựng model')
            st.write('ln = LinearRegression()')
            st.write('## Huấn luyện mô hình')
            st.write('ln.fit(X_train, y_train)')
            st.write('## Đánh giá')
            st.write('''\n
                    print(\'The full R-square is:\', lm.score(X,y))\n
                    print(\'The train R-square is:\', lm.score(X_train,y_train))\n
                    print(\'The test R-square is:\', lm.score(X_test,y_test))''')
            st.write('### from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score')
            st.write('yhat = lm.predict(X_test)')
            st.write('lm.intercept_')
            st.write('lm.coef_')
            st.write('''\n
                    intercept = model.intercept_\n
                    slope = model.coef_[0]\n
                    print(intercept, slope)\n
                    ''')
            st.write('r2 = r2_score(y_test,yhat)')
            st.write('mse = mean_squared_error(y_test, yhat)')
            st.write('mae = mean_absolute_error(y_test, yhat)')
            st.write('### DEEP')
            st.write('### from tensorflow.keras.models import Sequential')
            st.write('### from tensorflow.keras.layers import Dense, Input')
            st.write('### import tensorflow as tf')
            st.write('''\n
                    model=tf.keras.Sequential([\n
                    ----Input(shape=(X_train.shape[1],)),\n
                    ----Dense(128,activation='relu'),\n
                    ----Dense(64,activation='relu'),\n
                    ----Dense(1) # Lop dau ra khong co ham kich hoat vi day la bai toan hoi quy\n
                    ])
                    ''')
            st.write('##### Biên dịch mô hình')
            st.write('model.compile(optimizer=\'adam\',loss=\'mse\',metrics=[\'mae\'])')
            st.write('##### Huấn luyện mô hình')
            st.write('model.fit(X_train,y_train,epochs=100,validation_split=0.2,verbose=1)')
            st.write('''\n
                    y_pred=model.predict(X_test)\n
                    r2=r2_score(y_test,y_pred)\n
                    mse=mean_squared_error(y_test,y_pred)\n
                    mas=mean_absolute_error(y_test,y_pred)\n
                    print(r2)\n
                    print(mse)\n
                    print(mae)
                    ''')
            st.write('')
            st.write('')

            st.write('## PolynomialFeatures')
            st.write('##### from sklearn.preprocessing import PolynomialFeatures')
            st.write('pr = PolynomialFeatures(degree=2)')
            st.write('X_pr = pr.fit_transform(X)')
            st.write('X.shape, X_pr.shape')
            st.write('pr.get_feature_names_out()')
            st.write('làm tương tự linear phía trên')
        elif selected == 'pineline':
            st.write('## Pineline')
            st.write('## from sklearn.pipeline import Pipeline')
            st.write('## Xây dựng model')
            st.write('''\n
                    pipeline = Pipeline(steps=[\n
                    ('scaler', StandardScaler()),       # Chuẩn hóa dữ liệu\n
                    ('regressor', LinearRegression())   # Mô hình hồi quy tuyến tính\n
                    ])''')
            st.write('#### hoặc')    
            st.write('''\n
                    num_transformer = StandardScaler()\n
                    cat_transformer = OneHotEncoder(handle_unknown='ignore')\n
                    ##### Xây dựng ColumnTransformer\n
                    preprocessor = ColumnTransformer(\n
                    ----transformers=[\n
                    --------('num', num_transformer, num_cols),\n
                    --------('cat', cat_transformer, cat_cols)\n
                    ----])\n
                    ##### Xây dựng pipeline kết hợp xử lý dữ liệu và mô hình hóa\n
                    pipeline = Pipeline(steps=[('preprocessor', preprocessor),('model', LinearRegression())])\n
                    ''')        
            st.write('## Huấn luyện mô hình')
            st.write('pipeline.fit(X_train, y_train)')
            st.write('## Dự đoán trên tập kiểm tra')
            st.write('y_pred = pipeline.predict(X_test)')
            st.write('## Đánh giá mô hình')
            st.write('r2 = pipeline.score(X_test, y_test)')
            st.write('mse = mean_squared_error(y_test, y_pred)')
        elif selected == 'selectkbest':
            st.write('## SelectKBest')
            st.write('### from sklearn.feature_selection import SelectKBest, f_regression, chi2')
            st.write('##### Chú thích:')
            st.write('- f_regression: được sử dụng để đánh giá mức độ phụ thuộc tuyến tính giữa các đặc trưng và nhãn trong các bài toán hồi quy')
            st.write('- chi2: dùng trong các bài toán phân loại, yêu cầu giá trị không âm')
            st.write('## Phân loại kiểu dữ liệu')
            st.write('num_cols = X.select_dtypes(include=[\'int\',\'float\']).columns')
            st.write('cat_cols = X.select_dtypes(include=[\'object\']).columns')
            st.write('## Chuẩn hóa dữ liệu số')
            st.write('scaler = StandardScaler()')
            st.write('X[num_cols] = scaler.fit_transform(X[num_cols])')
            st.write('label_encoder = LabelEncoder()')
            st.write('''\n
                    for col in cat_cols:\n
                    ----X[col] = label_encoder.fit_transform(X[col])''')
            st.write('## Xây dụng model lựa chọn')
            st.write('selector = SelectKBest(score_func=f_regression, k=\'all\')')
            st.write('## Huấn luyện')
            st.write('selector.fit(X[num_cols], y)')
            st.write('## Tạo 2 dataframe')
            st.write('df_scores = pd.DataFrame(selector.scores_)')
            st.write('df_columns = pd.DataFrame(num_cols) # danh sách cột')
            st.write('## Nối dữ liệu')
            st.write('feature_scores = pd.concat([df_columns, df_scores], axis=1)')
            st.write('feature_scores.columns = [\'Feature\', \'Score\']')
            st.write('## Xấp xếp')
            st.write('feature_scores.sort_values(by=\'Score\', ascending=False, inplace=True, ignore_index=True)')
            st.write('## Chọn 10 gt đầu thành list')
            st.write('num_cols = feature_scores[\'Feature\'].head(10).tolist()')
            st.write('## Nối num và cat')
            st.write('X = pd.concat([X[num_cols], X[cat_cols]], axis=1)')
            st.write('## Sử dụng các model đánh giá')
        elif selected == 'cross-validation':
            st.write('## cross-validation')
            st.write('### from sklearn.model_selection import cross_val_score')
            st.write('## Tạo tập X, y')
            st.write('## Tạo model(hầu hết các model)')
            st.write('## Thực hiện')
            st.write('scores = cross_val_score(model, X, y, cv=5, scoring=\'accuracy\')')
            st.write('##### Chú thích:')
            st.write('- cv: Số lượng folds trong cross-validation (ví dụ: cv=5 nghĩa là chia dữ liệu thành 5 phần)')
            st.write('- scoring: có thể có hoặc không')
            st.write('## In kết quả cross-validation')
            st.write('print("Accuracy scores for each fold:", scores)')
            st.write('print("Mean accuracy:", np.mean(scores))')
            st.write('')
        elif selected == 'imbalanced':
            st.write('# Confusion_matrix')
            st.write('##### Chú thích:')
            st.write('''\n
                    - Precision: Thước đo độ chính xác của phân loại.\n
                    - Recall: Thước đo tính đầy đủ của phân loại\n
                    - F1 Score (F-score): Kết hợp precision và recall
                    ''')
            st.write('### from sklearn.metrics import classification_report, confusion_matrix')
            st.write('## Chia tập X, y')
            st.write('## Xây dụng model LogisticRegression')
            st.write('model = LogisticRegression(random_state=0)')
            st.write('## Huấn luyện')
            st.write('model.fit(X, y)')
            st.write('##    Đánh giá')
            st.write('model.classes_ : xem lớp')
            st.write('y_predict = model.predict(X) : tính y dự đoán')
            st.write('titanic[\'y_predict\'] = y_predict : tạo dataframe')
            st.write('titanic[y!=y_predict].shape[0] # số trường hợp dự đoán sai là 286')
            st.write('model.predict_proba(X)')
            st.write('model.score(X, y) # tỉ lệ số dự đoán đúng/ tổng số quan sát (accuracy)')
            st.write('titanic[y==y_predict].shape[0]/titanic.shape[0]')
            st.write('confusion_matrix(y, model.predict(X)) # cột: dự đoán; dòng: thực tế')
            st.write('- số hành khách chết là : 469+80=549')
            st.write('- số hành khách sống là: 206+136=342')
            st.write('- số dự đoán đúng cho sông: 136 (342)')
            st.write('- số dự đoán đúng cho chết: 469 (549)')
            st.write('- recall, 0: 469/(469+80)) # 80 trường hợp dự đoán sai là sống (đi qua nhà hàng xóm)')
            st.write('- precision, 0: 469/(469+206) (hàng xóm vào nhà mình) ...')
            st.write('##### Chú thích:')
            st.write('''\n
                    \# N: negative ~ 0; P: positive ~ 1\n
                    \# T: true; F: false\n
                    TN = 469 # dự đoán đúng trường hợp 0\n
                    TP = 136 # dự đoán đúng trường hợp 1\n
                    FP = 80 # dự đoán sai: thực tế là 0 ==> dự đoán là 1\n
                    FN = 206 # dự đoán sai: thực tế là 1 ==> dự đoán là 0
                    ''')
            st.write('accuracy = (TP+TN)/(TP+TN+FP+FN)')
            st.write('\# precison')
            st.write('p_0 = TN/(TN+FN)')
            st.write('p_1 = TP/(TP+FP)')
            st.write('\# recall')
            st.write('r_0 = TN/(TN+FP)')
            st.write('r_1 = TP/(TP+FN)')
            st.write('print(classification_report(y, model.predict(X)))')
            st.write('## Nhận xét')
            st.write('''\n
                    ### class 0: 
                    - precision trung bình (thước đo tính chính xác) ==> có chứa khá nhiều những điểm không thuộc class 0\n
                    - recall cao (thước đo tính đầy đủ) ==> dự đoán khá chính xác về 1 điểm thuộc về class 0\n
                    ### class 1:
                    - precision và recall đều thấp ==> mô hình xử lý kém đối với class 1\n
                    => tùy theo yêu cầu của bài toán ==> điều chỉnh precision, recall !!!
                    ''')
            st.write('# ROC Curve')
            st.write('### from sklearn.metrics import classification_report, confusion_matrix, roc_curve,roc_auc_score')
            st.write('y_pred_proba = model.predict_proba(X)[:,1]')
            st.write('fpr, tpr, thresholds = roc_curve(y,  y_pred_proba)')
            st.write('auc = roc_auc_score(y, y_pred_proba)')
            st.write('## Trực quan')
            st.write('plt.plot(fpr, tpr, marker=\'.\', label="auc="+str(auc))')
            st.write('plt.plot([0, 1], [0, 1], linestyle=\'--\') # y = x')
            st.write('plt.title("ROC Curve")')
            st.write('plt.xlabel("False Positive Rate")')
            st.write('plt.ylabel("True Positive Rate")')
            st.write('plt.legend(loc=4)')
            st.write('plt.show()')
            st.write('Xem thông số')
            st.write('thresholds[:10]')
            st.write('thresholds.size')
            st.write('thresholds.min(), thresholds.max()')
            st.write('### Sensitivity (độ nhạy)')
            st.write('TPR = TP/(TP+FN) # recall class 1')
            st.write('FPR = FP/(FP+TN)')
            st.write('### Specificity (độ đặc hiệu)')
            st.write('spec = TN/(TN+FP) # recall class 2')
            st.write('FPR = 1 - spec')
            st.write('y_pred_proba = model.predict_proba(X)[:,1] # cột 1: giá trị được tính khi > threshold --> 1, ngược lại < threshold --> 0')
            st.write('Trực quan')
            st.write('''\n
                    p_lst = [0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.95,1.0] # danh sách các threshold\n
                    tpr_lst, fpr_lst = [], []\n
                    for p in p_lst:\n
                    ----y_pred = np.where(y_pred_proba>=p, 1, 0)\n
                    ----cnf_matrix = metrics.confusion_matrix(y, y_pred)\n
                    ----TN = cnf_matrix[0,0]\n
                    ----TP = cnf_matrix[1,1]\n
                    ----FP = cnf_matrix[0,1]\n
                    ----FN = cnf_matrix[1,0]\n
                    ----TPR = TP/(TP+FN)\n
                    ----FPR = FP/(FP+TN)\n
                    ----fpr_lst.append(FPR)\n
                    ----tpr_lst.append(TPR)\n
                    ''')
            st.write('''\n
                    auc = metrics.roc_auc_score(y, y_pred_proba)\n
                    plt.plot(fpr_lst, tpr_lst, marker='.', label="auc="+str(auc))\n
                    plt.plot([0, 1], [0, 1], linestyle='--')\n

                    plt.title("ROC Curve")\n
                    plt.xlabel("False Positive Rate")\n
                    plt.ylabel("True Positive Rate")\n
                    plt.legend()\n
                    plt.show()\n
                    ''')
            st.write('## Đánh giá')
            st.write('''\n
                    - AUC > 0.90 ==> model rất tốt\n
                    - AUC từ 0.80 - 0.90 ==> model tốt\n
                    - AUC từ 0.70 - 0.80 ==> model trung bình\n
                    - AUC từ 0.60 - 0.70 ==> model không tốt\n
                    - AUC từ 0.50 - 0.60 ==> model không dùng được
                    ''')
            st.write('## Điều chỉnh ngưỡng')
            st.write('y_pred_proba = model.predict_proba(X)[::,1]')
            st.write('fpr, tpr, thresholds = roc_curve(y,  y_pred_proba)')
            st.write('df = pd.DataFrame({\'tpr\':tpr, \'fpr\':fpr, \'p\':thresholds})')
            st.write('cond = df[\'tpr\']>0.8 : chọn ngưỡng p sao cho tpr>0.8')
            st.write('cond = df[\'tpr\']>0.8')
            st.write('df[cond].sort_values(by=\'tpr\').head(10)')
            st.write('cond = df[\'fpr\']<0.4 : chọn ngưỡng p sao cho fpr<0.4')
            st.write('df[cond].sort_values(by=\'fpr\').tail(10)')
            st.write('cond = (df[\'tpr\']>0.8) & (df[\'fpr\']<0.4) : chọn ngưỡng p sao cho tpr>0.8 và fpr<0.4')
            st.write('df[cond]')
            st.write('m = (p_max+p_min)/2: threshold')
            st.write('''\n
                    th = m\n
                    /# dự đoán cho threshold mới\n
                    y_pred_proba = logreg.predict_proba(X)[::,1]\n
                    y_pred_ = np.where(y_pred_proba>=th, 1, 0)\n
                    /# tính lại confusion matrix và nhận xét\n
                    cnf_matrix_ = metrics.confusion_matrix(y, y_pred_)\n
                    cnf_matrix_
                    ''')
            st.write('# Under Sampling')
            st.write('# Over sampling')
            st.write('')
        elif selected == 'Multicollinearity':
            st.write('## Thêm cột phụ')
            st.write('### Xây dựng moii hình và đánh giá')
            st.write('X=data[[\'LSTAT\',\'RM\']]')
            st.write('y=data.MEDV')
            st.write('X_train, X_test, y_train, y_test = train_test_split(X, y,test_size=0.3, random_state = 42)')
            st.write('model = LinearRegression()')
            st.write('model.fit(X_train,y_train)')
            st.write('### from sklearn.metrics import mean_squared_error, mean_absolute_error,r2_score')
            st.write('y_pred = model.predict(X_test)')
            st.write('mse = mean_squared_error(y_test,y_pred)')
            st.write('mae = mean_absolute_error(y_test,y_pred)')
            st.write('print(r2, mse, mae )')
            st.write('### Thự hiện đa cộng tuyến')
            st.write('X = boston[[\'LSTAT\', \'RM\']]  # Chọn 2 biến có đa cộng tuyến')
            st.write('y = boston[\'MEDV\']')
            st.write('X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)')
            st.write('''\n
                    model_before = LinearRegression()\n
                    model_before.fit(X_train, y_train)\n
                    y_pred_before = model_before.predict(X_test)\n
                    mse_before = mean_squared_error(y_test, y_pred_before)\n
                    print("MSE trước khi xử lý đa cộng tuyến:", mse_before)\n
                    print("R2 trước khi xử lý đa cộng tuyến:", model_before.score(X_test,y_test))
                    ''')
            st.write('''\n
                    X_train_corr = X_train.copy()\n
                    X_train_corr['LSTAT_div_RM'] = X_train_corr['LSTAT'] / X_train_corr['RM']\n
                    \# Thêm biến mới sau khi xử lý đa cộng tuyến\n
                    \# X_train_corr.drop(['RM'],axis=1)\n
                    X_test_corr = X_test.copy()\n
                    X_test_corr['LSTAT_div_RM'] = X_test_corr['LSTAT'] / X_test_corr['RM']\n
                    \# X_test_corr.drop(['RM'],axis=1)\n
                    model_after = LinearRegression()\n
                    model_after.fit(X_train_corr, y_train)\n
                    y_pred_after = model_after.predict(X_test_corr)\n
                    mse_after = mean_squared_error(y_test, y_pred_after)\n
                    print("MSE sau khi xử lý đa cộng tuyến:", mse_after)\n
                    print("R2 sau khi xử lý đa cộng tuyến:", model_after.score(X_test_corr,y_test))
                    ''')
            st.write('## PCA')
            st.write('''\n
                    pca = PCA(n_components = 10)\n
                    pca.fit(X_train)\n
                    X_train = pca.transform(X_train)\n
                    model_after = LinearRegression()\n
                    model_after.fit(X_train, y_train)\n
                    X_test =pca.transform(X_test)\n
                    y_pred_after = model_after.predict(X_test)\n
                    mse_after = mean_squared_error(y_test, y_pred_after)\n
                    print("MSE sau khi xử lý đa cộng tuyến:", mse_after)\n
                    print("R2 sau khi xử lý đa cộng tuyến:", model_after.score(X_test,y_test))
                    ''')
            st.write('')
            st.write('')
            st.write('')
        elif selected == 'nlp':
            st.write('## NLP')
            st.write('### from sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer')
            st.write('vectorizer=CountVectorizer(stop_words=\'english\')')
            st.write('vectorizer.fit(X)')
            st.write('X=vectorizer.transform(X)')
            st.write('')
        elif selected == 'decision_tree':
            st.write('## Decision tree')
            st.write('### from sklearn.tree import DecisionTreeClassifier')
            st.write('model_tree = DecisionTreeClassifier()')
            st.write('model_tree.fit(X_now, Y_now)')
            st.write('yhat_new = model_tree.predict(X_new)')
            st.write('model_tree.predict_proba(X_new)')
            st.write('')
            st.write('')
            st.write('')
            st.write('')
        elif selected == 'random_forest':
            st.write('## Random forest')
            st.write('### from sklearn.ensemble import RandomForestClassifier')
            st.write('model = RandomForestClassifier(n_estimators=50) # so cay trong rung')
            st.write('model.fit(X_train, y_train)')
            st.write('model.estimators_[:3]')
            st.write('y_pred = model.predict(X_test)')
            st.write('### Đánh giá mô hình')
            st.write('print("Accuracy:", accuracy_score(y_test, y_pred))')
            st.write('')
            st.write('')
        elif selected == 'adaboost':
            st.write('Adaboots')
            st.write('### from sklearn.ensemble import AdaBoostClassifier')
            st.write('clf = AdaBoostClassifier(n_estimators=100, random_state=0)')
            st.write('clf.fit(X_train,y_train)')
            st.write('### from sklearn.metrics import classification_report as report')
            st.write('preds = clf.predict(X_test)')
            st.write('print(report(y_test,preds,digits=4))')
            st.write('### from sklearn.svm import SVC')
            st.write('### from sklearn.naive_bayes import GaussianNB')
            st.write('### from sklearn.linear_model import LogisticRegression')
            st.write('### from sklearn.tree import DecisionTreeClassifier')
            st.write('### from sklearn.ensemble import RandomForestClassifier')
            st.write('models = [LogisticRegression(),GaussianNB(),SVC(probability=True),DecisionTreeClassifier(),RandomForestClassifier()]')
            st.write('''\n
                    for model in models:\n
                    ----print(type(model).__name__)\n
                    ----clf = AdaBoostClassifier(n_estimators=100, random_state=0,estimator=model)\n
                    ----clf.fit(X_train,y_train)\n
                    ----preds = clf.predict(X_test)\n
                    ----print(report(y_test,preds,digits=4))
                    ''')
            st.write('### from HyperclassifierSearch import HyperclassifierSearch')
            st.write('''
                    models = {\n
                    'LogisticRegression': LogisticRegression(solver='lbfgs', max_iter=10000),\n
                    'RandomForestClassifier': RandomForestClassifier(),\n
                    'SVM': SVC(),\n
                    'DT': DecisionTreeClassifier()\n
                    }\n
                    params = {\n
                    'LogisticRegression': { 'C': [0.1, 1, 2], 'class_weight':['balanced',None] },\n
                    'RandomForestClassifier': { 'n_estimators': [50,200, 300,400,500],'class_weight':['balanced',None]},\n
                    'SVM' : {'kernel':['linear', 'poly', 'rbf', 'sigmoid']},\n
                    'DT' : {'criterion':['gini','Entropy'],'class_weight':['balanced',None]}\n
                    }
                    ''')
            st.write('search = HyperclassifierSearch(models, params)')
            st.write('best_model = search.train_model(X_train, y_train, cv=5,scoring=\'f1_macro\')')
            st.write('best_model')
            st.write('search.evaluate_model()')
            st.write('result = search.evaluate_model()')
            st.write('result[\'label\'] = result[\'Estimator\'].astype(str) + result[\'params\'].astype(str)')
            st.write('std = result[\'std_test_score\'].to_list()')
            st.write('mean_ = result[\'mean_test_score\'].to_list()')
            st.write('x = result[\'label\'].to_list()')
            st.write('plt.errorbar(x, mean_, std, linestyle=\'None\', marker=\'o\',capsize=3)')
            st.write('plt.xticks(rotation=90, ha=\'right\')')
            st.write('plt.show()')
            st.write('###### => Nhìn vào hình xem cái cao nhất lựa chọn, vd:C=1,kernel=\'linear\'')
            st.write('clf = LogisticRegression(C=1)')
            st.write('clf.fit(X_train,y_train)')
            st.write('preds = clf.predict(X_test)')
            st.write('print(report(y_test,preds,digits=4))')
            st.write('clf = SVC(kernel=\'linear\')')
            st.write('clf.fit(X_train,y_train)')
            st.write('preds = clf.predict(X_test)')
            st.write('print(report(y_test,preds,digits=4))')
            st.write('models = [LogisticRegression(C=1),LogisticRegression(C=2)]')
            st.write('''\n
                    for model in models:\n
                    ----print(type(model).__name__)\n
                    ----clf = AdaBoostClassifier(n_estimators=100, random_state=0,estimator=model)\n
                    ----clf.fit(X_train,y_train)\n
                    ----preds = clf.predict(X_test)\n
                    ----print(report(y_test,preds,digits=4))
                    ''')
            st.write('')
            st.write('')
            st.write('')
        elif selected == 'xgboost':
            st.write('## Xgboost')
            st.write('### from xgboost import XGBClassifier')
            st.write('xgb = XGBClassifier() # đơn giản')
            st.write('xgb = XGBClassifier(learning_rate=0.2, n_estimators=100, objective=\'binary:logistic\',nthread=1)')
            st.write('xgb.fit(X_train,y_train)')
            st.write('preds = xgb.predict(X_test)')
            st.write('print(report(y_test,preds,digits=4))')
            st.write('''\n
                    models = {
                    'XGBoost': XGBClassifier(objective='binary:logistic', nthread=1),\n
                    }\n
                    params = { \n
                    'XGBoost': {\n
                    'n_estimators': [100,200,400,500],\n
                    'learning_rate':[0.01,0.05,0.1,0.2,0.3]}
                    }
                    ''')
            st.write('search = HyperclassifierSearch(models, params)')
            st.write('best_model = search.train_model(X_train, y_train, cv=5,scoring=\'f1_macro\')')
            st.write('result = search.evaluate_model()')
            st.write('result[\'label\'] = result[\'Estimator\'].astype(str) + result[\'params\'].astype(str)')
            st.write('std = result[\'std_test_score\'].to_list()')
            st.write('mean_ = result[\'mean_test_score\'].to_list()')
            st.write('x = result[\'label\'].to_list()')
            st.write('plt.errorbar(x, mean_, std, linestyle=\'None\', marker=\'o\',capsize=3)')
            st.write('plt.xticks(rotation=90, ha=\'right\')')
            st.write('plt.show()')
            st.write('###### => Nhìn vào hình xem cái cao nhất lựa chọn, vd:C=1,kernel=\'linear\',n_estimators=200')
            st.write('xgb = XGBClassifier(learning_rate=0.05, n_estimators=200, objective=\'binary:logistic\',nthread=1)')
            st.write('xgb.fit(X_train,y_train)')
            st.write('preds = xgb.predict(X_test)')
            st.write('print(report(y_test,preds,digits=4))')
            st.write('')
        elif selected == 'catboost':
            st.write('## Catboost')
            st.write('### from catboost import CatBoostClassifier')
            st.write('cb = CatBoostClassifier()')
            st.write('cb.fit(X_train,y_train)')
            st.write('preds = cb.predict(X_test)')
            st.write('print(report(y_test,preds,digits=4))')
            st.write('')            
        elif selected == 'lightgbm':
            st.write('## Lightgbm')
            st.write('### import lightgbm as lgb')
            st.write('clf = lgb.LGBMClassifier()')
            st.write('clf.fit(X_train,y_train)')
            st.write('preds = clf.predict(X_test)')
            st.write('print(report(y_test,preds,digits=4))')
        elif selected == 'svm':
            st.write('## SVM')
            st.write('### from sklearn.svm import SVR')
            st.write('##### Tạo model')
            st.write('''\n
                    svr_rbf = SVR(kernel='rbf', C=100, gamma=0.1)\n
                    svr_lin = SVR(kernel='linear', C=100)\n
                    svr_poly = SVR(kernel='poly', C=100, degree=3,gamma='auto',coef0=1)\n
                    ''')
            st.write('##### Huấn luyện')
            st.write('''\n
                    svr_rbf.fit(X,y)\n
                    yhat_rbf=svr_rbf.predict(X)\n
                    svr_lin.fit(X,y)\n
                    yhat_lin=svr_lin.predict(X)\n
                    svr_poly.fit(X,y)\n
                    yhat_poly=svr_poly.predict(X)\n
                    ''')
            st.write('##### Trực quan')
            st.write('''\n
                    plt.figure(figsize=(12,5))\n
                    plt.subplot(1,3,1)\n
                    plt.plot(X,yhat_rbf, color='r')\n
                    plt.scatter(X,y)\n
                    plt.title("RBF")\n
                    plt.subplot(1,3,2)\n
                    plt.plot(X,yhat_lin, color='g')\n
                    plt.scatter(X,y)\n
                    plt.title("Linear")\n
                    plt.subplot(1,3,3)\n
                    plt.plot(X,yhat_poly, color='b')\n
                    plt.scatter(X,y)\n
                    plt.title("Poly")\n
                    plt.show()
                    ''')
        elif selected == 'cross_val_score':
            st.write('## Cross_val_score')
            st.write('### Biến liên tục')
            st.write('### from sklearn.model_selection import cross_val_score')
            st.write('### from sklearn.linear_model import LinearRegression')
            st.write('### from sklearn.neighbors import KNeighborsRegressor')
            st.write('### from sklearn.tree import DecisionTreeRegressor')
            st.write('### from sklearn.ensemble import RandomForestRegressor')
            st.write('### from sklearn.svm import SVR')
            st.write('### import time')
            st.write('##### Liệt kê các model sửng dụng')
            st.write('models=[LinearRegression(), KNeighborsRegressor(),SVR(),DecisionTreeRegressor(),RandomForestRegressor()]')
            st.write('scores=[]')
            st.write('train_times=[]')
            st.write('names=[]')
            st.write('''\n
                    for model in models:
                    ----start=time.time()
                    ----scores.append(cross_val_score(estimator = model,X=X_train,y=y_train, scoring="r2", cv=5).mean())\n
                    ----end=time.time()\n
                    ----train_times.append(end-start)\n
                    ----names.append(model.__class__.__name__)\n
                    df=pd.DataFrame(scores,columns=['Score'], index=range(len(models)))\n
                    df.insert(1,'Time',pd.Series(train_times))\n
                    df.insert(0,'Model',pd.Series(names))\n
                    df.head(10)
                    ''')
            st.write('##### Chọn model tốt nhất')
            st.write('### from sklearn.metrics import mean_absolute_error,mean_squared_error,r2_score')
            st.write('''\n
                    model=LinearRegression()\n
                    model.fit(X_train,y_train)\n
                    y_pred=model.predict(X_test)\n
                    r2=r2_score(y_test,y_pred)\n
                    mse=mean_squared_error(y_test,y_pred)\n
                    mae=mean_absolute_error(y_test,y_pred)\n
                    print(r2,mse,mae)
                    ''')
            st.write('### Biến phân loại')
            st.write('### from sklearn.linear_model import LogisticRegression')
            st.write('### from sklearn.naive_bayes import GaussianNB')
            st.write('### from sklearn.neighbors import KNeighborsClassifier')
            st.write('### from sklearn.tree import DecisionTreeClassifier')
            st.write('### from sklearn.ensemble import RandomForestClassifier')
            st.write('### from sklearn.svm import SVC')
            st.write('### import time')
            st.write('##### Liệt kê các model sửng dụng')
            st.write('''\n
                    models=[SVC(),LogisticRegression(),GaussianNB(),KNeighborsClassifier(n_neighbors=11),RandomForestClassifier(),DecisionTreeClassifier()]\n
                    scores=[]\n
                    train_times=[]\n
                    names=[]\n
                    /# Tạo dataframe gồm 3 cột trên \n
                    for model in models:\n
                    ----start=time.time()\n
                    ----scores.append(cross_val_score(model, X_train, y_train,scoring="accuracy", cv=10).mean())\n
                    ----end=time.time()\n
                    ----train_times.append(end-start)\n
                    ----names.append(model.__class__.__name__)\n
                        
                    df=pd.DataFrame(scores,columns=['Score'],index=range(len(models)))\n
                    df.insert(1,'Time',pd.Series(train_times))\n
                    df.insert(0,'Model',pd.Series(names))\n
                    df.head(10)
                    ''')
            st.write('')
            st.write('')
            st.write('')
        elif selected == 'gridsearchcv':
            st.write('## GridSearchCV')
            st.write('### from sklearn.model_selection import cross_val_score')
            st.write('### from sklearn.linear_model import LinearRegression')
            st.write('### from sklearn.neighbors import KNeighborsRegressor')
            st.write('### from sklearn.tree import DecisionTreeRegressor')
            st.write('### from sklearn.ensemble import RandomForestRegressor')
            st.write('### from sklearn.svm import SVR')
            st.write('### import time')
            st.write('##### Liệt kê các model sửng dụng')
            st.write('models=[LinearRegression(), KNeighborsRegressor(),SVR(),DecisionTreeRegressor(),RandomForestRegressor()]')
            st.write('scores=[]')
            st.write('train_times=[]')
            st.write('names=[]')
            st.write('''\n
                    for model in models:
                    ----start=time.time()
                    ----scores.append(cross_val_score(estimator = model,X=X_train,y=y_train, scoring="r2", cv=5).mean())\n
                    ----end=time.time()\n
                    ----train_times.append(end-start)\n
                    ----names.append(model.__class__.__name__)\n
                    df=pd.DataFrame(scores,columns=['Score'], index=range(len(models)))\n
                    df.insert(1,'Time',pd.Series(train_times))\n
                    df.insert(0,'Model',pd.Series(names))\n
                    df.head(10)
                    ''')
            st.write('### from sklearn.model_selection import GridSearchCV')
            st.write('##### SVR')
            st.write('''\n
                    grid_params = {
                    'C': [0.1, 1, 10, 100, 1000], #  'C': [0.1, 1, 10, 100, 1000,1000],\n
                    'epsilon': [0.1, 1],\n
                    'kernel': ['linear', 'rbf'],\n
                    'gamma': ['scale', 'auto'] \n
                    }\n
                    model_grid = GridSearchCV(SVR(), grid_params, cv=5)\n
                    model_grid.fit(X_train,y_train)\n
                    print('R2 score',model_grid.best_score_)\n
                    print('parameters',model_grid.best_params_)
                    ''')
            st.write('##### Decision Tree')
            st.write('''\n
                    grid_params = {\n
                    'max_depth': [5, 10, 20, None],\n
                    'min_samples_split': [2, 5, 10],\n
                    'min_samples_leaf': [1, 5, 10],\n
                    'max_features': ['auto', 'sqrt', 'log2']\n
                    }\n
                    model_grid = GridSearchCV(DecisionTreeRegressor(), grid_params, cv=5)\n
                    model_grid.fit(X_train,y_train)\n
                    print('R2 score',model_grid.best_score_)\n
                    print('parameters',model_grid.best_params_)
                    ''')
            st.write('##### Random Forest')
            st.write('''\n
                    grid_params = {\n
                    'n_estimators': [50, 100, 200],\n
                    'max_depth': [10, 20, 30, None],\n
                    'min_samples_split': [2, 5, 10],\n
                    'min_samples_leaf': [1, 2, 4],\n
                    'max_features': ['auto', 'sqrt', 'log2']\n
                    }\n
                    model_grid = GridSearchCV(RandomForestRegressor(), grid_params, cv=5) #n_job=-1\n
                    model_grid.fit(X_train,y_train)\n
                    print('R2 score',model_grid.best_score_)\n
                    print('parameters',model_grid.best_params_)
                    ''')
            st.write('##### KNeighbors')
            st.write('''\n
                    grid_params = {\n
                    'n_neighbors' : [3,5,7,9,11,13,15],\n
                    'weights' : ['uniform','distance'],\n
                    'metric' : ['minkowski','euclidean','manhattan']\n
                    }\n
                    model_grid = GridSearchCV(KNeighborsRegressor(), grid_params, cv=5)\n
                    model_grid.fit(X_train,y_train)\n
                    print('R2 score',model_grid.best_score_)\n
                    print('parameters',model_grid.best_params_)
                    ''')
            st.write('##### PIPLINE')
            st.write('### from sklearn.pipeline import Pipeline')
            st.write('model_pipeline = Pipeline(steps=[(\'Scale_data\',StandardScaler()),(\'SVM model\', SVR(kernel = \'linear\', C=1000))])')
            st.write('model_pipeline.fit(X_train,y_train)')
            st.write('''\n
                    y_pred = model_pipeline.predict(X_test)\n
                    print(model_pipeline.score(X_train,y_train))\n
                    print(model_pipeline.score(X_test,y_test))
                    ''')
            st.write('')
            st.write('')
            st.write('')
            st.write('')
            st.write('')
        elif selected == 'pca':
            st.write('## PCA')
            st.write('### from sklearn.decomposition import PCA')
            st.write('##### Tạo model PCA')
            st.write('pca = PCA(n_components=2)')
            st.write('##### Huấn luyện PCA')
            st.write('pca.fit(X_train_pca)')
            st.write('##### Transform PCA')
            st.write('X_train_pca = pca.transform(X_train_pca)')
            st.write('X_test_pca = pca.transform(X_test_pca)')
            st.write('##### Tạo model')
            st.write('model_pca = LogisticRegression(penalty=\'l1\',solver=\'saga\')')
            st.write('##### Huấn luyện')
            st.write('model_pca.fit(X_train_pca, y_train)')
            st.write('model_pca.score(X_test_pca,y_test)')
            st.write('## LDA')
            st.write('### from sklearn.discriminant_analysis import LinearDiscriminantAnalysis')
            st.write('##### Tạo model LDA')
            st.write('lda = LinearDiscriminantAnalysis()')
            st.write('##### Huấn luyện LDA')
            st.write('lda.fit(X_train_pca,y_train)')
            st.write('##### Transform LDA')
            st.write('X_train_lda = lda.transform(X_train_pca)')
            st.write('X_test_lda = lda.transform(X_test_pca)')
            st.write('##### Tạo model')
            st.write('model_lda = LogisticRegression()')
            st.write('##### Huấn luyện')
            st.write('model_lda.fit(X_train_lda, y_train)')
            st.write('##### Đánh giá')
            st.write('model_lda.score(X_test_lda,y_test)')


    elif choice == 'tong_hop':
        menu_tong_hop=['python','numpy','pandas','truc_quan_hoa','quy_trinh_data_pre_prpcessing',
        'nlp','glob','header','hieu_chinh_tham_so']
        selected = st.selectbox("Mời bạn lựa chọn ?",menu_tong_hop)
        st.write("Bạn chọn:", selected)
        if selected == 'python':
            st.write('## python')
            st.write('### bỏ qua thông báo')
            st.write('import warnings')
            st.write('warnings.filterwarnings(\'ignore\')')
            st.write('')
            st.write('')
            st.write('')
            st.write('')
            st.write('')
            st.write('')
            st.write('')
        elif selected == 'numpy':
            st.write('## numpy')
            st.write('Cài đặt: pip install numpy')
            st.write('Lệnh: import numpy as np')
            st.write('### Tạo mảng một chiều')
            st.write('Lệnh: arr=np.array(object)')
            st.image('7_tong_hop/numpy/n1_1.png')
            st.image('7_tong_hop/numpy/n1_2.png')
            st.image('7_tong_hop/numpy/n1_3.png')
            st.write('np.eye(n,dtype): tạo đường chéo với giá trị n')
            st.write('np.random.seed(n): giữ nguyên giá trị ngẫu nhiên, n là số bất kỳ')
            st.write('np.random.choice(X,size=n): tạo ngẫu nhiên các số ngẫu nhiên nhỏ hơn X, n là phần tử')
            st.image('7_tong_hop/numpy/n_choice.png')
            st.write('### Tạo mảng từ tập tin')
            st.image('7_tong_hop/numpy/n_taptin.png')
            st.write('### Truy suất')
            st.write('#### + Truy suất vị trí')
            st.write('arr[vị trí]: bắt đầu 0 hoặc nghịch -1')
            st.write('arr[s:s] hoặc arr[s:s:s]')
            st.write('#### + Truy suất 1 điều kiện')
            st.write('arr[arr>1]')
            st.write('#### + Truy suất nhiều điều kiện')
            st.write('arr[(arr>1) & (arr<10)]')
            st.write('#### + Truy suất điều kiện where')
            st.write('arr[np.where(arr<20)]')
            st.write('### Cập nhật dữ liệu')
            st.write('#### + Thêm phần tử vào cuối mảng')
            st.write('np.concatenate([arr,[gt,gt]])')
            st.write('#### + Chèn phần tử')
            st.write('np.insert(arr,vt,gt) hoặc np.insert(arr,vt,[gt,gt])')
        elif selected == 'pandas':
            st.write('## Cài đặt: pip install pandas')
            st.write('## Lệnh: import pandas as pd')
            st.write('## Series')
            st.write('Tạo series: import pandas as pd')
            st.write('## Pandas')
            st.write('### Đọc file')
            st.write('sep hoặc delimiter: Ký tự phân tách các giá trị, mặc định là dấu phẩy (,).')
            st.write('header: Dòng số (hoặc danh sách các dòng) dùng làm tiêu đề cột, mặc định là infer (tự động suy ra từ dòng đầu tiên)')
            st.write('index_col: Cột (hoặc danh sách các cột) dùng làm chỉ mục')
            st.write('skiprows: Số dòng hoặc danh sách các dòng cần bỏ qua ở đầu file')
            st.write('encoding: Mã hóa của file, ví dụ utf-8')
            st.write('sheet_name=n,:file excel có nhiều sheet')
            
            st.write('### Lệnh cơ bản')
            st.write('df.shape')
            st.write('df.head()')
            st.write('df.tail()')
            st.write('df.info()')
            st.write('df.describe(include=\'object\')')
            st.write('object: lấy kiểu ký tự, all:lấy hết')
            st.write('')
            
            st.write('### Chuyển cột thành dòng')
            st.write('df.T')
            st.write('Chọn kiểu dữ liệu')
            st.write('df.select_dtypes(include=[\'int\',\'float\',\'object\'])')
            st.write('')
            st.write('### Truy suất')
            st.write('df.loc[5,\'col\']: dòng 5, cột col')
            st.write('df.iloc[5,3]:dòng 5, cột 3')
            st.write('df.iloc[s:s:s,s:s:s]:dòng từ s-s,cột từ s-s')
            st.write('df.loc[s:s],[\'col\',\'col\']:dòng s-s, các cột col')
            st.write('df[\'col\']: cột col')
            st.write('')
            st.write('### Kiểm tra trùng và Null')
            st.write('df.duplicated(subset=[col,col],keep=\'first\')')
            st.write('first: lấy trùng đầu, last: lấy trùng cuối, false:không lấy trùng')
            st.write('df.duplicated().any()')
            st.write('df.duplicated().sum()')
            st.write('df.isnull().sum()')
            st.write('')

            st.write('### Giá trị phổ biến mode')
            st.write('df[\'col\'].mode()[0]')

            st.write('### Xóa')
            st.write('df.drop([col,col,col],axis=1):xóa label')
            st.write('df.drop(df.index([])): xóa index')

            st.write('### Xóa trùng')
            st.write('df.drop_duplicates()')
            st.write('')
            st.write('')

            st.write('### Thay thế')
            st.write('Thay null bằng giá trị khác')
            st.write('df[\'col\']=df[\'col\'].fillna(gt_moi)')
            
            st.write('Thay giá trị bằng giá trị khác')
            st.write('map/apply/')
            st.write('A=A[tên cột].map({gt_cột:gt_mới,gt_cột:gt_mới})')
            st.write('df[\'shape_1\'] = np.where(df[\'shape\']==\'small\', 0, np.where(df[\'shape\']==\'medium\', 1, 2))')
            st.write('')
            st.write('')
            st.write('### Nối')
            st.write('')
            st.write('df=pd.concat([df1,df2],ignore_index=True)')
            st.write('df=pd.merge(df1,df2,left_on=\'col_1\',right_on=\'col_2\')')
            st.write('')
            st.write('')
            st.write('### Đếm phân loại')
            st.write('df[col].value_counts()')
            st.write('df[col].value_counts(normalize=True) %')
            st.write('')
            st.write('')
            st.write('')
            st.write('### Phân loại chuyển đổi')
            st.write('pd.get_dummies(data=df[col],prefix=\ttên_nối\t)')

            st.write('### Index')
            st.write('df.reset_index(inplace=True, drop=True)')

            st.write('### Tương quan')
            st.write('df[lst_col].corr()')

            st.write('### Groupby')
            st.write('df.groupby(\'region\')[\'AveragePrice\'].mean()')

            st.write('### Sắp xếp')
            st.write('df.sort_values(ascending=False)')
            st.write('df.rank(ascending=False).astyped(int)')
            st.write('### unpivot(cột thành dòng)')
            st.write('df_new = pd.melt(frame=df, id_vars="marker",value_vars=["cyl", "hp", "carb"], var_name="metric")')
            st.write('### pivot(dòng thành cột)')
            st.write('df_pivot = df_new.pivot(index = \'marker\', columns=\'metric\', values=\'value\')')
            st.write('ko lam dc do co gt bi trun')
            st.write('### Pivot table')
            st.write('df_pivot = df_new.pivot_table(index = \'marker\', columns=\'metric\', values=\'value\', aggfunc= np.mean)')
            st.write('### melt(dòng thành cột)')
            st.write('df_new = pd.melt(frame=df, id_vars=\'name\', value_vars=[\'Math\',\'Chemist\',\'Physist\'], var_name=\'subject\')')
            st.write('')

        elif selected == 'truc_quan_hoa':
            menu_truc_quan_hoa=['pandas','matplotlib','seaborn']
            selected = st.selectbox("Mời bạn lựa chọn ?",menu_truc_quan_hoa)
            st.write("Bạn chọn:", selected)
            if selected == 'pandas':
                st.write('## pandas')
                st.write('#### Lệnh cơ bản')
                st.write('')
                st.write('')
                st.write('')
                st.write('')
                st.write('')
                st.write('')
                st.write('- Kẻ đường line')
                st.write('plt.axvline(x=m, color=\'r\') (vd m=5)')
                st.write('- show')
                st.write('plt.show()')
                st.write('#### biểu đồ')
                st.write('table.plot.bar()')
                st.write('table.plot(kind=\'bar\', stacked=True)')
                st.write('')
                st.write('')
                st.write('')
            elif selected == 'matplotlib':
                st.write('## matplotlib')
                st.write('##### Lệnh: import matplotlib.pyplot as plt')
                st.write('')
                st.write('## Vẽ ô')
                st.write('##### Vẽ 1 ô')
                st.write('')
                st.write('Vẽ nhiều ô')
                st.write('- Cách 1')
                st.write('plt.subplot(số dòng,số cột,1)')
                st.write('')
                st.write('')
                st.write('- Cách 2')
                st.write('fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(10, 5))# axes')
                st.write('ax1.set_title(\'Before Scaling\')')
                st.write('sns.kdeplot(df[\'x1\'], ax=ax1)')
                st.write('ax2.set_title(\'After Standard Scaler\')')
                st.write('sns.kdeplot(scaled_df[\'x1\'], ax=ax2)')
                st.write('')
                st.write('')
                st.write('')
                st.write('')

            elif selected == 'seaborn':
                st.write('## seaborn')
                st.write('##### Lệnh: import seaborn as sns')
                st.write('## Phân phối tần suất')
                st.write('sns.histplot(data=df[col],bins=10,kde=True)')
                st.write('')
                st.write('')
                st.write('## Số lượng')
                st.write('sns.countplot(data=df,x=titanic_data.Pclass,hue=phan_loai)')
                st.write('sns.displot(data=df, x=\'AveragePrice\', hue=\'type\')')
                st.write('sns.barplot(data=df,x=\'type\',y=\'AveragePrice\',hue=\'type\',errorbar=None)')
                st.write('')
                st.write('## Phân bố')
                st.write('sns.scatterplot(data=df, x=\'Age\', y=\'Fare\')')
                st.write('sns.regplot(data=df, x=\'Age\', y=\'Fare\')')
                st.write('sns.pairplot(data=df, vars=[\'Age\',\'Fare\'], size=3, kind=\'reg\')')

                st.write('## outlier')
                st.write('sns.boxplot(data=titanic_data,x=titanic_data.Pclass,y=titanic_data.Fare)')
                st.write('sns.boxplot(data=titanic, y=\'Age\',whis=1.5)#whis=1.5 la 2 thanh gach gioi han')
                st.write('')
                st.write('## Heatmap')
                st.write('sns.heatmap(df, annot=True)')
                st.write('')
                st.write('''\n
                        from matplotlib import pyplot as plt\n
                        import seaborn as sns\n
                        import warnings\n
                        warnings.filterwarnings('ignore')\n
                        col = list(data.iloc[:,:-1].columns)\n
                        fig, ax = plt.subplots(nrows=4, ncols=2, figsize=(15,20))\n
                        ax = fig.add_subplot()\n

                        # plt.figure(figsize=(15,15))\n
                        for i in range(len(col)):\n
                        ----plt.subplot(4,2,i+1)\n
                        ----sns.distplot( data[col[i]], bins=30)\n
                        ----plt.axvline(data[col[i]].mean(), color='c', label='mean')\n
                        ----plt.axvline(data[col[i]].min(), color='g', label='min')\n
                        ----plt.axvline(data[col[i]].max(), color='r', label='max') \n       
                        ----plt.legend(loc='upper right')\n
                        ----plt.title(col[i])\n
                        plt.show()
                        ''')
        elif selected == 'quy_trinh_data_pre_prpcessing':
            menu_quy_trinh=['1_problem_and_goal','2_read_and_view_basic_information','3_data_clearning',
                            '4_eda','5_feature_engineering','6_model_selection','7_model_building','8_model_evaluation','9_save_model']
            selected = st.selectbox("Mời bạn lựa chọn ?",menu_quy_trinh)
            st.write("Bạn chọn:", selected)
            if selected == '1_problem_and_goal':
                st.write('## Vấn đề')
                st.write('## Mục tiêu')
            elif selected == '2_read_and_view_basic_information':
                st.write('## Đọc dữ liệu')
                st.write('## Tích hợp dữ liệu')
                st.write('## Xem thông tin cơ bản')
                st.write('## Xác định các thuộc tính')
                st.write('output')
                st.write('inputs')
                st.write('categorical')
                st.write('numeric')
                st.write('## Thống kê mô tả')
                st.write('- Phân tích đơn biến - Biến numeric')
                st.write('df.Age.describe()')
                st.write('df.Age.std()')
                st.write('df[\'Age\'].skew() # >0: phân phối lệch phải')
                st.write('df[''Age''].kurtosis() # >0: nhọn hơn phân phối chuẩn')
                st.write('Vẽ biểu đồ hist, distplot, boxplot')
                st.write('- Phân tích hai biến - Biến numeric và biến numeric')
                st.write('df[[\'Fare\',\'Age\']].corr() # không có mối tương quan giữa Fare và Age')
                st.write('Vẽ biểu đồ scatterplot, regplot, pairplot')
                st.write('- Phân tích hai biến - Biến categorical và biến categorical')
                st.write('table = pd.crosstab(df.Pclass, df.Sex)')
                st.write('Vẽ biểu đồ bar')
                st.write('- Phân tích hai biến - Biến categorical và biến numeric')
                st.write('Vẽ biểu đồ boxplot')
                st.write('## Xác định biến')
                st.write('#### Biến số')
                st.write('- Xác định các biến số')
                st.write('num_cols=df[[\'LotArea\', \'1stFlrSF\', \'2ndFlrSF\',\'SalePrice\']].columns')
                st.write('''\n
                        for i in num_cols:\n
                        ----if df[i].nunique()<=15:\n
                        --------print(f'{i}: unique value {df[i].unique()}')\n
                        ----else:\n
                        --------print(f'{i}: unique value {df[i].nunique()}')
                        ''')
                st.write('')
                st.write('#### Biến phân loại')
                st.write('- Xác định các biết phân loại')
                st.write('cat_cols=df[[\'LotShape\', \'Street\', \'HouseStyle\',\'YearBuilt\', \'FullBath\', \'BedroomAbvGr\', \'TotRmsAbvGrd\']].columns')
                st.write('''\n
                        for i in cat_cols:\n
                        ----if df[i].nunique()<=15:\n
                        --------print(f'{i}: unique value {df[i].unique()}')\n
                        ----else:\n
                        --------print(f'{i}: unique value {df[i].nunique()}')
                        ''')
                st.write('')

                st.write('## Chuyển đổi kiểu dữ liệu')
            elif selected == '3_data_clearning':
                st.write('## Xử lý dữ liệu trùng lặp')
                st.write('## Xử lý dữ liệu bị thiếu')
                st.write('## Xử lý dữ liệu không nhất quán')
                st.write('## Phát hiện và xử lý ngoại lệ')
                st.write('## Loại bỏ nhiễu')
            elif selected == '4_eda':
                st.write('## Thống kê')
                st.write('## Kiểm định')
                st.write('##### Kiểm định Chi-square dùng cho 2 biến phân loại')
                st.write('- Phát biểu giả thuyết')
                st.write('H0: 2 biến phân loại là độc lập')
                st.write('Ha: 2 biến phân loại là phụ thuộc')
                st.write('Lệnh: from scipy.stats import chi2_contingency')
                st.write('- Tạo bảng tần số cho Pclass và Survived')
                st.write('cross_tab = pd.crosstab(titanic_data[\'Pclass\'], titanic_data[\'Survived\'])')
                st.write('- Thực hiện kiểm định Chi-square')
                st.write('chi2, p, dof, expected = chi2_contingency(cross_tab)')
                st.write('''\n
                            - In kết quả\n
                            print("Giá trị Chi-square:", chi2)\n
                            print("Giá trị p-value:", p)\n
                            print("Bậc tự do:", dof)\n
                            print("Bảng tần số dự kiến:")\n
                            print(expected)''')
                st.write('''\n
                            - nếu p-value<0.05 --> bác bỏ H0 và chấp nhận Ha\n
                            - nếu p-value>=0.05 --> chấp nhận H0\n
                            - kết luận: do p-value<0.05 ==> Pclass và Survived là hai biến phụ thuộc và có ý nghĩa thống kê (không phải do ngẫu nhiên)\n
                            - khoảng tin cậy 95%: nghĩa là trong 100 lần lấy mẫu thì xem như kết luận là đúng với 95 lần''')
                st.write('##### Kiểm định ANOVA (Analysis of Variance) dùng cho biến liên tục với một hoặc nhiều biến phân loại (số nhóm có thể 2+)')
                st.write('- Phát biểu giả thuyết')
                st.write('H0: m1=m2=...')
                st.write('Ha: có ít nhất mi<>mj')
                st.write('Lệnh: from scipy.stats import f_oneway')
                st.write('H0: Không có sự khác biệt ý nghĩa thống kê về mức trung bình giá vé giữa các lớp hành khách')
                st.write('Ha: Có sự khác biệt ý nghĩa thống kê về mức trung bình giá vé giữa các lớp hành khách')
                st.write('- Tạo danh sách các nhóm dữ liệu (mức giá vé theo từng lớp hành khách)')
                st.write('group1 = titanic_data[titanic_data[\'Pclass\'] == 1][\'Fare\']')
                st.write('group2 = titanic_data[titanic_data[\'Pclass\'] == 2][\'Fare\']')
                st.write('group3 = titanic_data[titanic_data[\'Pclass\'] == 3][\'Fare\']')
                st.write('- Thực hiện kiểm định ANOVA')
                st.write('f_statistic, p_value = f_oneway(group1, group2, group3)')
                st.write('''\n
                            - In kết quả\n
                            print("Giá trị F-statistic:", f_statistic)\n
                            print("Giá trị p-value:", p_value)''')
                st.write('- Kiểm tra kết quả')
                st.write('''\n
                            alpha = 0.05\n
                            if p_value < alpha: # bác bỏ H0\n
                            ----print("Có sự khác biệt ý nghĩa thống kê về mức giá vé giữa các lớp hành khách.")\n
                            else: # chấp nhận H0\n
                            ----print("Không có sự khác biệt ý nghĩa thống kê về mức giá vé giữa các lớp hành khách.")''')
                st.write('- Cách làm tổng quát hơn')
                st.write('titanic_data.groupby(\'Pclass\').size()')
                st.write('- Tạo danh sách các nhóm dữ liệu')
                st.write('lst = []')
                st.write('for name, g in titanic_data.groupby(\'Pclass\'):')
                st.write('----lst.append(g[\'Fare\'])')
                st.write('- st.write('')')
                st.write('f_statistic, p_value = f_oneway(*lst)')
                st.write('''\n
                            - In kết quả\n
                            print("Giá trị F-statistic:", f_statistic)\n
                            print("Giá trị p-value:", p_value)''')
                st.write('- pip install statsmodels')
                st.write('Lệnh: import statsmodels.api as sm')
                st.write('Lệnh: from statsmodels.formula.api import ols')
                st.write('- Tạo mô hình ANOVA')
                st.write('formula = \'Fare ~ C(Pclass)\'')
                st.write('model = ols(formula, data=titanic_data).fit()')
                st.write('- Thực hiện phân tích ANOVA')
                st.write('anova_table = sm.stats.anova_lm(model, typ=2)')
                st.write('typ=2: tính toán sự biến đổi của mỗi biến độc lập trong mô hình, không xem xét tương tác giữa các biến độc lập.')
                st.write('anova_table')
                st.write('PR(>F): Giá trị p, cho biết xác suất của việc có sự khác biệt giữa các nhóm là ngẫu nhiên hay không. Nếu giá trị p nhỏ hơn một ngưỡng alpha đã chọn trước (thường là 0.05), chúng ta có thể bác bỏ giả thuyết không có sự khác biệt giữa các nhóm.')
                st.write('- Tạo mô hình ANOVA')
                st.write('formula = \'Fare ~ C(Pclass) + C(Sex) + C(Pclass):C(Sex)\'')
                st.write('model = ols(formula, data=titanic_data).fit()')
                st.write('- Thực hiện phân tích ANOVA')
                st.write('anova_table = sm.stats.anova_lm(model, typ=2)')
                st.write('anova_table')
                st.write('')

                st.write('## Các pakage hữu ích')
                st.write('##### Data profiling')
                st.write('Lênh: import ydata_profiling as pp hoặc(import pandas_profiling as pp)')
                st.write('profile = pp.ProfileReport(titanic)')
                st.write('##### Dataprep')
                st.write('Lệnh: from dataprep.eda import create_report, plot, plot_missing')
                st.write('report = create_report(titanic)')
                st.write('plot(titanic)')
                st.write('plot(titanic, \'Fare\')')
                st.write('plot(titanic, \'Fare\', \'Age\')')
                st.write('plot_missing(titanic)')
                st.write('Lênh: from dataprep.clean import clean_headers')
                st.write('df = clean_headers(df)')
                st.write('')

                st.write('##### ttth-mds5-analyzer')
                st.write('Lệnh: from analysis.analyzer import TTTH_Analyzer as Analyzer')
                st.write('_analyzer = Analyzer()')
                st.write('- Biến category: Pclass')
                st.write('_analyzer.analyze_category_variable(variable_name=\'Pclass\', df=titanic)')
                st.write('- Biến numeric: Age')
                st.write('_analyzer.analyze_numeric_variable(variable_name=\'Age\', df=titanic)')
                st.write('- Biến category và category')
                st.write('_analyzer.analyze_category_vs_category(var1=\'Pclass\', var2=\'Survived\', df=titanic)')
                st.write('twoway_table = _analyzer.create_tw_table(var1=\'Pclass\', var2=\'Survived\', df=titanic)')
                st.write('_analyzer.use_chi_2_evaluation(twoway_table)')
                st.write('- Biến numeric và category')
                st.write('_analyzer.analyze_continous_vs_categories(continous_var=\'Age\', category_vars=[\'Pclass\', \'Sex\'], df=titanic)')
                st.write('_analyzer.analyze_anova_table_for_continous_vs_categories(continous_var=\'Age\', category_vars=[\'Pclass\', \'Sex\'], df=titanic)')
                st.write('_analyzer.check_imbalance_class(variable_name=\'Survived\', df=titanic)')
                st.write('_analyzer.check_outlier_of_numerical_variable(numerical_variable=\'Fare\', df=titanic)')
                st.write('_analyzer.visualize_box_for_continous_vs_categories(continous_var=\'Fare\', category_vars=[\'Pclass\',\'Sex\'], df=titanic)')
                st.write('')

                st.write('## Khám phá dữ liệu')
                st.write('##### Xem thông tin bên trong cột')
                st.write('df.Sex.unique()')
                st.write('##### Xem thông tin số lượng cột')
                st.write('df[\'Sex\'].value_counts()')


                st.write('## Trực quan')
                st.write('## Độ nghiêng')
                st.write('df[col].skew()')

                st.write('## Kiểm tra Oulier')
                st.write('#### Phương pháp IQR')
                st.write('''\n
                        def remove_outliers(df, column_name, lower_percentile=0.25, upper_percentile=0.75, threshold=1.5):\n
                        ----Q1 = df[column_name].quantile(lower_percentile)\n
                        ----Q3 = df[column_name].quantile(upper_percentile)\n
                        ----IQR = Q3 - Q1\n
                        ----lower_bound = Q1 - threshold * IQR\n
                        ----upper_bound = Q3 + threshold * IQR\n
                        ----return df[(df[column_name] >= lower_bound) & (df[column_name] <= upper_bound)]
                        ''')
                st.write('''\n
                        for col in df.select_dtypes(include=['int','float']).columns:\n
                        ----df = remove_outliers(df, col)
                        ''')
                st.write('')
                st.write('#### Tìm ngoài 3 độ lệch chuẩn')
                st.write('sns.boxplot(data=insurance, y=\'bmi\'); # có outliers')
                st.write('insurance.bmi.describe() # trung binh va trung vi lech it-> sai so it')
                st.write('sns.distplot(insurance[\'bmi\']); # xấp xĩ phân phối chuẩn')
                st.write('- Lệnh: from scipy.stats import zscore')
                st.write('insurance[\'bmi_zscore\'] = insurance[[\'bmi\']].apply(zscore) # chuyển đổi zscore')
                st.write('--> phân phối chuẩn tắc (Standard Normal Distribution)')
                st.write('phân phối chuẩn tắc có trung bình là 0, độ lệch chuẩn là 1')
                st.write('sns.distplot(insurance[\'bmi_zscore\']); # các outlier nằm về phía bên phải (ngoài 3 độ lệch chuẩn)')
                st.write('- xác định các outlier')
                st.write('r = 2.5')
                st.write('outliers = insurance[(insurance[\'bmi_zscore\']<-r)|(insurance[\'bmi_zscore\']>r)]')
                st.write('outliers[\'bmi_zscore\'].sort_values()')
                st.write('insurance.drop(index=outliers.index, inplace=True) # xóa các outlier')
                st.write('')
                st.write('')
            elif selected == '5_feature_engineering':
                st.write('## Tạo thuộc tính')
                st.write('### Xem thông tin của thuộc tính')
                st.write('### Mã hóa thuộc tính phân loại: one hot encoder/dummy encoder, label encoder, Binning value')
                st.write('##### Label Encoder')
                st.write('Lệnh: from sklearn.preprocessing import LabelEncoder')
                st.write('le = LabelEncoder()')
                st.write('df[\'shape_\'] = le.fit_transform(df[\'shape\'])')
                st.write('le.fit(df[\'sex\'])')
                st.write('df[\'sex_\'] = le.transform(df[\'sex\'])')
                st.write('##### One Hot Encoder')
                st.write('Lênh: from sklearn.preprocessing import OneHotEncoder')
                st.write('ohe = OneHotEncoder()')
                st.write('df_sex_ohe = ohe.transform(df[[\'sex\']]).toarray()')
                st.write('ohe.categories_')
                st.write('df_ = pd.DataFrame(df_sex_ohe, columns=[\'S_\'+i for i in ohe.categories_[0]])')
                st.write('dfOneHot = pd.concat([df,df_], axis=1)')
                st.write('##### Dummy Encoder')
                st.write('df_ = pd.get_dummies(df, columns=[\'sex\',\'shape\'], prefix=\'S\')')
                st.write('##### Binning value')
                st.write('survey_df[\'equal_binned\'] = pd.cut(survey_df[\'ConvertedSalary\'], 5)')
                st.write('bins = [-np.inf, 10000, 50000, 100000, 150000, np.inf]')
                st.write('labels = [\'Very low\', \'Low\', \'Medium\', \'High\', \'Very high\']')
                st.write('survey_df[\'boundary_binned\'] = pd.cut(survey_df[\'ConvertedSalary\'], bins, labels = labels)')
                st.write('')
            
                st.write('## Xử lý các danh mục không phổ biến')
                st.write('## Chuẩn hóa dữ liệu')
                st.write('### Log Normalization')
                st.write('print("Phương sai của Alcohol:", wine_sub["Alcohol"].var())')
                st.write('print("Phương sai của Proline:", wine_sub["Proline"].var()) # variance của biến Proline rất cao')
                st.write('print(\'Độ xiên của Proline:\', wine_sub["Proline"].skew()) # lệch phải')
                st.write('sns.displot(data=wine_sub, x=\'Proline\', kde=True); # không tuân theo luật phân phối chuẩn; lệch phải')
                st.write('có phương sai cao, lệch phải khá lớn, không phân phối chuẩn ==> áp dụng Log Normalization')
                st.write('wine_sub["Proline_log"] = np.log(wine_sub["Proline"]) # log cơ số e')
                st.write('### Standard Scaler')
                st.write('Xấp xỉ phân phối chuẩn, Trung bình bằng 0, Độ lệch chuẩn bằng 1')
                st.write('- Kiểm định Shapiro-Wilk')
                st.write('Lệnh: from scipy import stats')
                st.write('statistic, p_value = stats.shapiro(df[\'x1\']) # H0: dữ liệu có dạng phân phối chuẩn')
                st.write('- Mức ý nghĩa (alpha)')
                st.write('alpha = 0.05')
                st.write('- So sánh giá trị p với mức ý nghĩa')
                st.write('''\n
                            if p_value <= alpha:\n
                            ----print("Có bằng chứng để từ chối giả thuyết H0.")\n
                            else:\n
                            ----print("Không có bằng chứng để từ chối giả thuyết H0.")''')
                st.write('Lệnh: from sklearn.preprocessing import StandardScaler')
                st.write('scaler = StandardScaler()')
                st.write('scaled_df = scaler.fit_transform(df) # fit + transform')
                st.write('scaled_df = pd.DataFrame(scaled_df, columns=[\'x1\', \'x2\', \'x3\'])')
                st.write('### MinMax Scaler')
                st.write('không là phân phối chuẩn, không có outlier (hoặc phải xử lý outlier trước đó)')
                st.write('Lệnh: from sklearn.preprocessing import MinMaxScaler')
                st.write('df.hist()')
                st.write('min_max_scaler = MinMaxScaler()  # feature_range =(0, 1)')
                st.write('X_after_min_max_scaler = min_max_scaler.fit_transform(X)')
                st.write('X_after_min_max_scaler = pd.DataFrame(X_after_min_max_scaler, columns=[\'Age\', \'Salary\'])')
                st.write('')
                st.write('')
                st.write('')
                st.write('### RobustScaler')
                st.write('Lệnh: from sklearn.preprocessing import RobustScaler')
                st.write('scaler=RobustScaler()')
                st.write('titanic_data[[\'Age\',\'Fare\']]=scaler.fit_transform(titanic_data[[\'Age\',\'Fare\']])')
                st.write('### Binarizer')
                st.write('Lệnh: from sklearn.preprocessing import Binarizer')
                st.write('scaler = preprocessing.Binarizer(threshold=0)')
                st.write('scaled_Y = scaler.fit_transform(Y)')
                st.write('SimpleImputer')
                st.write('imputer = SimpleImputer(strategy=\'mean\') # strategy=\'most_frequent\': chọn gt trung bình')
                st.write('imputed_data = imputer.fit_transform(data): điền gt bị thiếu')
                st.write('data = pd.DataFrame(imputed_data, columns=data.columns)')

            elif selected == '6_model_selection':
                st.write('## Chia dữ liệu X, y')
                st.write('### - Cách 1:')
                st.write('##### from sklearn.model_selection import train_test_split')
                st.write('X = A.drop(\'label\', axis=1)')
                st.write('y = A[\'label\']')
                st.write('X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)')
                st.write('### - Cách 2:')
                st.write('train_data = data_sub.sample(frac=0.8, random_state=42)')
                st.write('test_data = data_sub.drop(train_data.index)')
            elif selected == '7_model_building':    
                st.write('## Xây đựng model')
                st.write('### ')
                st.write('#### ')
                st.write('### Logistic Regression')
                st.write('##### from sklearn.linear_model import LogisticRegression')
                st.write('model = LogisticRegression()')
                st.write('model.fit(X_train, y_train)')
                st.write('##### from sklearn.metrics import accuracy_score')
                st.write('y_pred = model.predict(X_test)')
                st.write('accuracy = accuracy_score(y_test, y_pred)')
                st.write('### ')
                st.write('##### ')
                st.write('### ')
                st.write('##### ')

            elif selected == '8_model_evaluation':
                pass
            elif selected == '9_save_model':
                st.write('## Pickle')
                st.write('### import pickle')
                st.write('''\n
                        pkl_filename='NBA_model.pkl'\n
                        with open(pkl_filename,'wb') as file:\n
                        ----pickle.dump(knn,file)
                        ''')
                st.write('''\n
                        with open(pkl_filename,'rb') as file:\n
                        ----nba_model=pickle.load(file)
                        ''')
                st.write('## Pickle - Gzip')
                st.write('### import pickle')
                st.write('### import gzip')
                st.write('''\n
                        with gzip.open('surprise.pkl.gz', 'wb') as file:\n
                        ----pickle.dump(algorithm, file, protocol=pickle.HIGHEST_PROTOCOL)
                        ''')
                st.write('''\n
                        with gzip.open('surprise.pkl.gz', 'rb') as file:\n
                        ----algorithm = pickle.load(file)
                        ''')
        elif selected == 'nlp':
            st.write('import nltk')
            st.write('from nltk.corpus import stopwords')
            st.write('from nltk.tokenize import word_tokenize')
            st.write('from nltk.stem import PorterStemmer')
            st.write('from nltk.stem import WordNetLemmatizer')
            st.write('')
            
            st.write('')
            st.write('## Quy trình')
            st.write('# Bước 1: Loại bỏ các ký tự đặc biệt')
            st.write('# Bước 2: Chuyển đổi chữ thường')
            st.write('# Bước 3: Tách từ (Tokenization)')
            st.write('# Bước 4: Loại bỏ Stopwords')
            st.write('# Bước 5: Lemmatization(là quá trình chuyển đổi một từ về dạng cơ bản của nó)')
            st.write('')
            
        elif selected == 'glob':
            st.write('## glob')
            st.write('import glob')
            st.write('### Đọc file')
            st.write('csv_files=glob.glob(\'data/iris*.csv\')')
            st.write('### Chuyển các file thành list')
            st.write('''\n
                        lst=[]\n
                        for f in csv_files:\n
                        ----df_=pd.read_csv(f,index_col=0)\n
                        ----lst.append(df_)''')
            st.write('### Chuyển thành dataframe')
            st.write('iris = pd.concat(lst, ignore_index=True)')
            st.write('')
            st.write('')
        elif selected == 'header':
            st.write('## Header: thay đổi tên cột')
            st.write('Cài đặt: # pip install dataprep')
            st.write('### from dataprep.clean import clean_headers')
            st.write('Cài đặt: # pip install dataprep')
            st.write('df = clean_headers(df)')
            st.write('clean_headers(df, replace={"éditeur": "publisher", "★": "star"})')
            st.write('### from dataprep.clean import clean_date')
            st.write('df = clean_date(df, \'date\')')
            st.write('### from dataprep.clean import clean_text')
            st.write('df = clean_text(df, "text")')
            st.write('')
            st.write('')
        elif selected == 'hieu_chinh_tham_so':
            st.write('## Hiệu Chỉnh Tham Số')
            st.write('##### from sklearn import datasets')
            st.write('#### Đọc dữ liệu số viết tay')
            st.write('digits = datasets.load_digits()')
            st.write('digits.data.shape')
            st.write('digits.target')
            st.write('digits.target.size')
            st.write('plt.imshow(digits.images[50], cmap=plt.cm.gray_r, interpolation=\'nearest\')')
            st.write('plt.show()')
            st.write('digits.target[50]')
            st.write('')
            st.write('#### Chuẩn bị dữ liệu mô hình')
            st.write('X = digits.data')
            st.write('y = digits.target')
            st.write('##### from sklearn.model_selection import train_test_split')
            st.write('X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3)')
            st.write('##### from sklearn.ensemble import RandomForestClassifier')
            st.write('model=RandomForestClassifier()')
            st.write('model.fit(X_train,y_train)')
            st.write('model.score(X_test,y_test) # Đánh giá')
            st.write('')
            st.write('## Cách 1: Chia Train, Test theo các tỷ lệ')
            st.write('''\n
                    for test_split in [0.2,0.25,0.3]:\n
                    score_test = []\n
                    for i in range(5):\n
                    ----X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=test_split)\n
                    ----model.fit(X_train,y_train)\n
                    ----score_test.append(model.score(X_test,y_test))\n
                    print('With test size split ', test_split, ' we have test score: ', np.mean(score_test) ) 
                    ''')
            st.write('')
            st.write('## Cách 2: Dùng Cross_val_score để tính scores của model, cho biết score trung bình')
            st.write('##### from sklearn.model_selection import cross_val_score')
            st.write('''\n
                    X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.25)\n
                    scores=cross_val_score(model, X_train, y_train,scoring="accuracy", cv=5)\n
                    print(scores)\n
                    print(scores.mean() , scores.std())
                    ''')
            st.write('#### - Chọn model nào')
            st.write('##### from sklearn.linear_model import LogisticRegression')
            st.write('##### from sklearn.naive_bayes import GaussianNB')
            st.write('##### from sklearn.neighbors import KNeighborsClassifier')
            st.write('##### from sklearn.tree import DecisionTreeClassifier')
            st.write('##### from sklearn.ensemble import RandomForestClassifier')
            st.write('##### from sklearn.svm import SVC')
            st.write('##### import time')
            st.write('##### Liệt kê các model sửng dụng')
            st.write('''\n
                    models=[SVC(),LogisticRegression(),GaussianNB(),KNeighborsClassifier(n_neighbors=11),RandomForestClassifier(),DecisionTreeClassifier()]\n
                    scores=[]\n
                    train_times=[]\n
                    names=[]\n
                    /# Tạo dataframe gồm 3 cột trên \n
                    for model in models:\n
                    ----start=time.time()\n
                    ----scores.append(cross_val_score(model, X_train, y_train,scoring="accuracy", cv=10).mean())\n
                    ----end=time.time()\n
                    ----train_times.append(end-start)\n
                    ----names.append(model.__class__.__name__)\n
                        
                    df=pd.DataFrame(scores,columns=['Score'],index=range(len(models)))\n
                    df.insert(1,'Time',pd.Series(train_times))\n
                    df.insert(0,'Model',pd.Series(names))\n
                    df.head(10)
                    ''')
            st.write('')
            st.write('#### - Hiệu chỉnh tham số')
            st.write('''\n
                    grid_params = {'n_neighbors' : [3,5,7,9,11,13,15],\n
                    'weights' : ['uniform','distance'],\n
                    'metric' : ['minkowski','euclidean','manhattan']}
                    ''')
            st.write('##### - Dùng Grid Search CV')
            st.write('##### from sklearn.model_selection import GridSearchCV')
            st.write('knnmodel_grid = GridSearchCV(KNeighborsClassifier(), grid_params, cv=5)')
            st.write('''\n
                    start=time.time()\n
                    knnmodel_grid.fit(X_train,y_train)\n
                    end=time.time()\n
                    print ('Time (in miliseconds):',(end-start))\n
                    print(knnmodel_grid.best_score_)\n
                    print(knnmodel_grid.best_params_)
                    ''')
            st.write('##### - Dùng Random Search CV')
            st.write('##### from sklearn.model_selection import RandomizedSearchCV')
            st.write('knnmodel_random = RandomizedSearchCV(KNeighborsClassifier(), grid_params, cv=5)')
            st.write('''\n
                    start=time.time()\n
                    knnmodel_random.fit(X_train,y_train)\n
                    end=time.time()\n
                    print ('Time (in miliseconds):',(end-start))\n
                    print(knnmodel_random.best_score_)\n
                    print(knnmodel_random.best_params_)
                    ''')
            st.write('##### + Đánh giá')
            st.write('##### from sklearn.metrics import precision_score, recall_score, f1_score')
            st.write('##### from sklearn.metrics import accuracy_score')
            st.write('''\n
                    y_pred = knnmodel_grid.predict(X_test)\n
                    score = accuracy_score(y_test,y_pred)\n
                    precision = precision_score(y_test,y_pred,average='macro')\n
                    recall = recall_score(y_test,y_pred,average='macro')\n
                    f1 = f1_score(y_test,y_pred, average='macro')\n
                    print(score, recall, precision, f1)
                    ''')
            st.write('##### - Các tham số thường dùng')
            st.write('''\n
                    \## Logistic Regression\n
                    grid_params = {'solvers'  : ['newton-cg', 'lbfgs', 'liblinear'],\n
                    ------------'penalty'  : ['l1','l2'],\n
                    ------------'c_values' : [100, 10, 1.0, 0.1, 0.01]}\n

                    \## KNN\n
                    grid_params = {'n_neighbors' : [3,5,7,9,11,13,15],\n
                    ------------'weights' : ['uniform','distance'],\n
                    ------------'metric' : ['minkowski','euclidean','manhattan']}\n
                    \## Naive Bayes\n
                    grid_params = {'var_smoothing': np.logspace(0,-9, num=100)}\n

                    \## RandomForest\n
                    grid_params = {'n_estimators' : [10, 100, 1000],\n
                    ------------'max_features' : ['sqrt', 'log2']}\n

                    \## SVM\n
                    grid_params = {'C': [0.1,1, 10, 100], 'gamma': [1,0.1,0.01,0.001],'kernel': ['rbf', 'poly', 'sigmoid']}\n
                    ''')
            st.write('')
            st.write('##### -  Dùng ADABoost')
            st.write('##### from sklearn.ensemble import AdaBoostClassifier')
            st.write('##### from sklearn.tree import DecisionTreeClassifier')
            st.write('ml = DecisionTreeClassifier(max_depth=6)')
            st.write('clf = AdaBoostClassifier(n_estimators=50,estimator=ml)')
            st.write('score = cross_val_score(clf, X_train, y_train,scoring="accuracy", cv=10).mean()')
            st.write('print(score)')
            st.write('##### - Dùng XGBoost')
            st.write('##### import xgboost as xgb')
            st.write('xgb_model = xgb.XGBClassifier()')
            st.write('score = cross_val_score(xgb_model, X_train, y_train,scoring="accuracy", cv=10).mean()')
            st.write('print(score)')
else:
    if user:
        st.write('Nhập sai yêu cầu')